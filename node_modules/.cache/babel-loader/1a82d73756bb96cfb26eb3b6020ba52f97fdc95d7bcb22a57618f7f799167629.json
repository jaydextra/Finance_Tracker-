{"ast":null,"code":"var _jsxFileName = \"/Users/machome/Documents/Finance Planner/finance-tracker/src/components/CreditCardGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreditCardGraph = ({\n  cards,\n  monthlyBudget,\n  strategy = 'snowball'\n}) => {\n  _s();\n  const [showInterest, setShowInterest] = useState(false);\n  const calculatePayoffData = () => {\n    console.group('Debt Payoff Calculation');\n    console.log('Initial Setup:', {\n      cards: cards,\n      monthlyBudget: monthlyBudget,\n      strategy: strategy\n    });\n\n    // Deep copy cards to avoid modifying original data\n    let remainingCards = cards.map(card => ({\n      ...card,\n      balance: parseFloat(card.balance),\n      interestRate: parseFloat(card.interestRate),\n      minPayment: parseFloat(card.minPayment)\n    }));\n\n    // Sort cards based on strategy\n    remainingCards.sort((a, b) => {\n      if (strategy === 'snowball') {\n        return a.balance - b.balance;\n      }\n      return b.interestRate - a.interestRate;\n    });\n    console.log('Sorted Cards:', remainingCards);\n    const monthlyData = [];\n    let month = 0;\n    let totalInterestPaid = 0;\n    let availableMoney = parseFloat(monthlyBudget);\n    while (remainingCards.some(card => card.balance > 0) && month < 360) {\n      console.group(`Month ${month} Calculations`);\n      const monthInfo = {\n        month,\n        balances: {},\n        totalBalance: 0,\n        totalInterest: totalInterestPaid\n      };\n\n      // Calculate interest and minimum payments\n      remainingCards.forEach(card => {\n        if (card.balance > 0) {\n          // Calculate monthly interest\n          const monthlyInterest = card.balance * (card.interestRate / 100) / 12;\n          totalInterestPaid += monthlyInterest;\n          card.balance += monthlyInterest;\n          console.log(`Card: ${card.name}`, {\n            currentBalance: card.balance,\n            monthlyInterest: monthlyInterest,\n            minPayment: card.minPayment,\n            frequency: card.frequency\n          });\n\n          // Adjust minimum payment based on frequency\n          let adjustedMinPayment = card.minPayment;\n          if (card.frequency === 'Bi-Weekly') {\n            adjustedMinPayment = card.minPayment * 26 / 12; // Convert bi-weekly to monthly\n            console.log(`Bi-Weekly Adjustment: ${card.name}`, {\n              originalMinPayment: card.minPayment,\n              adjustedMonthlyPayment: adjustedMinPayment\n            });\n          } else if (card.frequency === 'Weekly') {\n            adjustedMinPayment = card.minPayment * 52 / 12; // Convert weekly to monthly\n            console.log(`Weekly Adjustment: ${card.name}`, {\n              originalMinPayment: card.minPayment,\n              adjustedMonthlyPayment: adjustedMinPayment\n            });\n          }\n\n          // Apply minimum payment\n          const minPayment = Math.min(card.balance, adjustedMinPayment);\n          card.balance -= minPayment;\n          availableMoney -= minPayment;\n          monthInfo.balances[card.name] = card.balance;\n          monthInfo.totalBalance += card.balance;\n          console.log(`After Payment: ${card.name}`, {\n            appliedPayment: minPayment,\n            newBalance: card.balance,\n            remainingBudget: availableMoney\n          });\n        }\n      });\n\n      // Apply remaining money to focus card\n      if (availableMoney > 0) {\n        const focusCard = remainingCards.find(card => card.balance > 0);\n        if (focusCard) {\n          const extraPayment = Math.min(availableMoney, focusCard.balance);\n          focusCard.balance = Math.max(0, focusCard.balance - extraPayment);\n          console.log('Extra Payment Applied:', {\n            card: focusCard.name,\n            amount: extraPayment,\n            newBalance: focusCard.balance\n          });\n        }\n      }\n      monthlyData.push(monthInfo);\n      availableMoney = parseFloat(monthlyBudget);\n      console.log('Month Summary:', {\n        totalBalance: monthInfo.totalBalance,\n        totalInterest: monthInfo.totalInterest\n      });\n      console.groupEnd();\n      month++;\n    }\n    console.log('Final Payoff Summary:', {\n      monthsToPayoff: monthlyData.length,\n      totalInterestPaid: totalInterestPaid\n    });\n    console.groupEnd();\n    return monthlyData;\n  };\n  const payoffData = calculatePayoffData();\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        backgroundColor: 'rgba(255, 255, 255, 0.9)',\n        titleColor: '#2d3436',\n        bodyColor: '#2d3436',\n        borderColor: '#e2e8f0',\n        borderWidth: 1,\n        padding: 12,\n        displayColors: true,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: $${parseFloat(context.raw).toLocaleString()}`;\n          }\n        }\n      },\n      legend: {\n        position: 'top',\n        align: 'end',\n        labels: {\n          usePointStyle: true,\n          pointStyle: 'circle',\n          padding: 20,\n          font: {\n            size: 12,\n            family: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif'\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          maxTicksLimit: 6,\n          font: {\n            size: 12\n          },\n          callback: function (value) {\n            return `Month ${value}`;\n          }\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.05)',\n          drawBorder: false\n        },\n        ticks: {\n          font: {\n            size: 12\n          },\n          callback: function (value) {\n            return '$' + value.toLocaleString();\n          }\n        }\n      }\n    },\n    interaction: {\n      intersect: false,\n      mode: 'index'\n    }\n  };\n  const chartData = {\n    labels: payoffData.map(data => data.month),\n    datasets: [{\n      label: 'Remaining Balance',\n      data: payoffData.map(data => data.totalBalance.toFixed(2)),\n      borderColor: '#3498db',\n      backgroundColor: 'rgba(52, 152, 219, 0.1)',\n      fill: true,\n      tension: 0.4,\n      borderWidth: 2\n    }, ...(showInterest ? [{\n      label: 'Total Interest',\n      data: payoffData.map(data => data.totalInterest.toFixed(2)),\n      borderColor: '#e74c3c',\n      backgroundColor: 'rgba(231, 76, 60, 0.1)',\n      fill: true,\n      tension: 0.4,\n      borderWidth: 2\n    }] : [])]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"credit-card-graph\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-check form-switch\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-check-input\",\n          type: \"checkbox\",\n          checked: showInterest,\n          onChange: e => setShowInterest(e.target.checked),\n          id: \"showInterestToggle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-check-label\",\n          htmlFor: \"showInterestToggle\",\n          children: \"Show Interest Accumulation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payoff-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Months to Pay Off:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: payoffData.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Total Interest:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"$\", payoffData[payoffData.length - 1].totalInterest.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s(CreditCardGraph, \"4Gtj0zc+jj6FZH5jO22h21hq+n4=\");\n_c = CreditCardGraph;\nexport default CreditCardGraph;\nvar _c;\n$RefreshReg$(_c, \"CreditCardGraph\");","map":{"version":3,"names":["React","useState","Line","jsxDEV","_jsxDEV","CreditCardGraph","cards","monthlyBudget","strategy","_s","showInterest","setShowInterest","calculatePayoffData","console","group","log","remainingCards","map","card","balance","parseFloat","interestRate","minPayment","sort","a","b","monthlyData","month","totalInterestPaid","availableMoney","some","monthInfo","balances","totalBalance","totalInterest","forEach","monthlyInterest","name","currentBalance","frequency","adjustedMinPayment","originalMinPayment","adjustedMonthlyPayment","Math","min","appliedPayment","newBalance","remainingBudget","focusCard","find","extraPayment","max","amount","push","groupEnd","monthsToPayoff","length","payoffData","chartOptions","responsive","maintainAspectRatio","plugins","tooltip","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","padding","displayColors","callbacks","label","context","dataset","raw","toLocaleString","legend","position","align","labels","usePointStyle","pointStyle","font","size","family","scales","x","grid","display","ticks","maxTicksLimit","callback","value","y","beginAtZero","color","drawBorder","interaction","intersect","mode","chartData","data","datasets","toFixed","fill","tension","className","children","type","checked","onChange","e","target","id","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","style","height","options","_c","$RefreshReg$"],"sources":["/Users/machome/Documents/Finance Planner/finance-tracker/src/components/CreditCardGraph.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst CreditCardGraph = ({ cards, monthlyBudget, strategy = 'snowball' }) => {\n  const [showInterest, setShowInterest] = useState(false);\n\n  const calculatePayoffData = () => {\n    console.group('Debt Payoff Calculation');\n    console.log('Initial Setup:', {\n      cards: cards,\n      monthlyBudget: monthlyBudget,\n      strategy: strategy\n    });\n\n    // Deep copy cards to avoid modifying original data\n    let remainingCards = cards.map(card => ({\n      ...card,\n      balance: parseFloat(card.balance),\n      interestRate: parseFloat(card.interestRate),\n      minPayment: parseFloat(card.minPayment)\n    }));\n\n    // Sort cards based on strategy\n    remainingCards.sort((a, b) => {\n      if (strategy === 'snowball') {\n        return a.balance - b.balance;\n      }\n      return b.interestRate - a.interestRate;\n    });\n\n    console.log('Sorted Cards:', remainingCards);\n\n    const monthlyData = [];\n    let month = 0;\n    let totalInterestPaid = 0;\n    let availableMoney = parseFloat(monthlyBudget);\n\n    while (remainingCards.some(card => card.balance > 0) && month < 360) {\n      console.group(`Month ${month} Calculations`);\n      \n      const monthInfo = {\n        month,\n        balances: {},\n        totalBalance: 0,\n        totalInterest: totalInterestPaid\n      };\n\n      // Calculate interest and minimum payments\n      remainingCards.forEach(card => {\n        if (card.balance > 0) {\n          // Calculate monthly interest\n          const monthlyInterest = (card.balance * (card.interestRate / 100)) / 12;\n          totalInterestPaid += monthlyInterest;\n          card.balance += monthlyInterest;\n\n          console.log(`Card: ${card.name}`, {\n            currentBalance: card.balance,\n            monthlyInterest: monthlyInterest,\n            minPayment: card.minPayment,\n            frequency: card.frequency\n          });\n\n          // Adjust minimum payment based on frequency\n          let adjustedMinPayment = card.minPayment;\n          if (card.frequency === 'Bi-Weekly') {\n            adjustedMinPayment = (card.minPayment * 26) / 12; // Convert bi-weekly to monthly\n            console.log(`Bi-Weekly Adjustment: ${card.name}`, {\n              originalMinPayment: card.minPayment,\n              adjustedMonthlyPayment: adjustedMinPayment\n            });\n          } else if (card.frequency === 'Weekly') {\n            adjustedMinPayment = (card.minPayment * 52) / 12; // Convert weekly to monthly\n            console.log(`Weekly Adjustment: ${card.name}`, {\n              originalMinPayment: card.minPayment,\n              adjustedMonthlyPayment: adjustedMinPayment\n            });\n          }\n\n          // Apply minimum payment\n          const minPayment = Math.min(card.balance, adjustedMinPayment);\n          card.balance -= minPayment;\n          availableMoney -= minPayment;\n\n          monthInfo.balances[card.name] = card.balance;\n          monthInfo.totalBalance += card.balance;\n\n          console.log(`After Payment: ${card.name}`, {\n            appliedPayment: minPayment,\n            newBalance: card.balance,\n            remainingBudget: availableMoney\n          });\n        }\n      });\n\n      // Apply remaining money to focus card\n      if (availableMoney > 0) {\n        const focusCard = remainingCards.find(card => card.balance > 0);\n        if (focusCard) {\n          const extraPayment = Math.min(availableMoney, focusCard.balance);\n          focusCard.balance = Math.max(0, focusCard.balance - extraPayment);\n          console.log('Extra Payment Applied:', {\n            card: focusCard.name,\n            amount: extraPayment,\n            newBalance: focusCard.balance\n          });\n        }\n      }\n\n      monthlyData.push(monthInfo);\n      availableMoney = parseFloat(monthlyBudget);\n      \n      console.log('Month Summary:', {\n        totalBalance: monthInfo.totalBalance,\n        totalInterest: monthInfo.totalInterest\n      });\n      console.groupEnd();\n      \n      month++;\n    }\n\n    console.log('Final Payoff Summary:', {\n      monthsToPayoff: monthlyData.length,\n      totalInterestPaid: totalInterestPaid\n    });\n    console.groupEnd();\n\n    return monthlyData;\n  };\n\n  const payoffData = calculatePayoffData();\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        backgroundColor: 'rgba(255, 255, 255, 0.9)',\n        titleColor: '#2d3436',\n        bodyColor: '#2d3436',\n        borderColor: '#e2e8f0',\n        borderWidth: 1,\n        padding: 12,\n        displayColors: true,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: $${parseFloat(context.raw).toLocaleString()}`;\n          }\n        }\n      },\n      legend: {\n        position: 'top',\n        align: 'end',\n        labels: {\n          usePointStyle: true,\n          pointStyle: 'circle',\n          padding: 20,\n          font: {\n            size: 12,\n            family: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif'\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          maxTicksLimit: 6,\n          font: {\n            size: 12\n          },\n          callback: function(value) {\n            return `Month ${value}`;\n          }\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.05)',\n          drawBorder: false\n        },\n        ticks: {\n          font: {\n            size: 12\n          },\n          callback: function(value) {\n            return '$' + value.toLocaleString();\n          }\n        }\n      }\n    },\n    interaction: {\n      intersect: false,\n      mode: 'index'\n    }\n  };\n\n  const chartData = {\n    labels: payoffData.map(data => data.month),\n    datasets: [\n      {\n        label: 'Remaining Balance',\n        data: payoffData.map(data => data.totalBalance.toFixed(2)),\n        borderColor: '#3498db',\n        backgroundColor: 'rgba(52, 152, 219, 0.1)',\n        fill: true,\n        tension: 0.4,\n        borderWidth: 2\n      },\n      ...(showInterest ? [{\n        label: 'Total Interest',\n        data: payoffData.map(data => data.totalInterest.toFixed(2)),\n        borderColor: '#e74c3c',\n        backgroundColor: 'rgba(231, 76, 60, 0.1)',\n        fill: true,\n        tension: 0.4,\n        borderWidth: 2\n      }] : [])\n    ]\n  };\n\n  return (\n    <div className=\"credit-card-graph\">\n      <div className=\"graph-controls\">\n        <div className=\"form-check form-switch\">\n          <input\n            className=\"form-check-input\"\n            type=\"checkbox\"\n            checked={showInterest}\n            onChange={(e) => setShowInterest(e.target.checked)}\n            id=\"showInterestToggle\"\n          />\n          <label className=\"form-check-label\" htmlFor=\"showInterestToggle\">\n            Show Interest Accumulation\n          </label>\n        </div>\n      </div>\n      <div className=\"chart-container\" style={{ height: '400px' }}>\n        <Line data={chartData} options={chartOptions} />\n      </div>\n      <div className=\"payoff-summary\">\n        <div className=\"summary-item\">\n          <span>Months to Pay Off:</span>\n          <strong>{payoffData.length}</strong>\n        </div>\n        <div className=\"summary-item\">\n          <span>Total Interest:</span>\n          <strong>${payoffData[payoffData.length - 1].totalInterest.toFixed(2)}</strong>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreditCardGraph; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}