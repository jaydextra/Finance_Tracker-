{"ast":null,"code":"import _objectSpread from\"/Users/machome/Documents/GitHub/Finance_Tracker-/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/* eslint-disable no-unused-vars */// src/App.js\nimport React,{useState,useEffect,createContext,useContext}from'react';import'./App.css';import Chart from'chart.js/auto';import ChartDataLabels from'chartjs-plugin-datalabels';import{Collapse,Button,Card,Nav}from'react-bootstrap';import{Line}from'react-chartjs-2';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,ArcElement}from'chart.js';import MonthPage from'./components/MonthPage';import CreditCardTracker from'./components/CreditCardTracker';// Register ChartJS components\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,ArcElement);// Create theme context\nconst ThemeContext=/*#__PURE__*/createContext();// Add this before the App component.\nexport const useTheme=()=>useContext(ThemeContext);function App(){const[transactions,setTransactions]=useState([]);const[incomeDescription,setIncomeDescription]=useState('');const[incomeAmount,setIncomeAmount]=useState('');const[expenseDescription,setExpenseDescription]=useState('');const[expenseAmount,setExpenseAmount]=useState('');const[category,setCategory]=useState('Bills');const[dueDate,setDueDate]=useState(new Date().toISOString().split('T')[0]);const[frequency,setFrequency]=useState('Monthly');const[currentMonth,setCurrentMonth]=useState(new Date().getMonth());const[chart,setChart]=useState(null);const[isIncomeOpen,setIsIncomeOpen]=useState(false);const[isIncomeListOpen,setIsIncomeListOpen]=useState(true);const[isExpenseOpen,setIsExpenseOpen]=useState(false);const[editingId,setEditingId]=useState(null);const[editingValues,setEditingValues]=useState({});const[isDarkMode,setIsDarkMode]=useState(false);const[currentYear,setCurrentYear]=useState(new Date().getFullYear());const[allMonthsTransactions,setAllMonthsTransactions]=useState({});const[activeTab,setActiveTab]=useState('budget');const[creditCards,setCreditCards]=useState([]);const[customCategory,setCustomCategory]=useState('');const months=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];// Load transactions from localStorage on component mount\nuseEffect(()=>{// Load all data on mount\nconst loadData=()=>{try{const savedTransactions=localStorage.getItem('transactions');const savedMonthsTransactions=localStorage.getItem('allMonthsTransactions');const savedCreditCards=localStorage.getItem('creditCards');if(savedTransactions){setTransactions(JSON.parse(savedTransactions));}if(savedMonthsTransactions){setAllMonthsTransactions(JSON.parse(savedMonthsTransactions));}if(savedCreditCards){setCreditCards(JSON.parse(savedCreditCards));}}catch(error){console.error('Error loading data:',error);}};loadData();},[]);// Only run on mount\n// Clean up chart on component unmount\nuseEffect(()=>{return()=>{if(chart){chart.destroy();}};},[chart]);// Update the chart useEffect\nuseEffect(()=>{const ctx=document.getElementById('expenseChart');if(!ctx)return;// Create a flag to track if the component is mounted\nlet isMounted=true;try{// Get transactions for current month from both sources\nconst monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];const regularTransactions=transactions.filter(t=>{const tDate=new Date(t.date);return tDate.getMonth()===currentMonth&&tDate.getFullYear()===currentYear;});// Combine transactions and filter out skipped ones\nconst allTransactions=[...regularTransactions,...monthTransactions].filter(t=>t.type==='expense'&&!t.skipped);// Calculate totals by category\nconst categoryTotals=allTransactions.reduce((acc,transaction)=>{if(!acc[transaction.category]){acc[transaction.category]=0;}acc[transaction.category]+=parseFloat(transaction.amount);return acc;},{});// Only proceed if we have data and component is mounted\nif(Object.keys(categoryTotals).length>0&&isMounted){const chartConfig={type:'pie',data:{labels:Object.keys(categoryTotals),datasets:[{data:Object.values(categoryTotals),backgroundColor:Object.keys(categoryTotals).map(category=>category==='Bills'?'rgba(255, 99, 132, 0.8)':category==='Savings'?'rgba(54, 162, 235, 0.8)':category==='Personal'?'rgba(255, 206, 86, 0.8)':'rgba(255, 206, 86, 0.8)'),borderColor:Object.keys(categoryTotals).map(category=>category==='Bills'?'rgba(255, 99, 132, 1)':category==='Savings'?'rgba(54, 162, 235, 1)':category==='Personal'?'rgba(255, 206, 86, 1)':'rgba(255, 206, 86, 1)'),borderWidth:1}]},options:{responsive:true,maintainAspectRatio:false,animation:{duration:500// Reduce animation duration\n},plugins:{datalabels:{formatter:value=>\"$\".concat(value.toFixed(2)),color:'#fff',font:{weight:'bold',size:14},textAlign:'center'},legend:{position:'right',labels:{color:isDarkMode?'#ffffff':'#666666',font:{size:12},generateLabels:chart=>{const data=chart.data;if(data.labels.length&&data.datasets.length){return data.labels.map((label,i)=>{const value=data.datasets[0].data[i];return{text:\"\".concat(label,\": $\").concat(value.toFixed(2)),fillStyle:data.datasets[0].backgroundColor[i],strokeStyle:data.datasets[0].borderColor[i],lineWidth:1,hidden:false,index:i};});}return[];}}},tooltip:{callbacks:{label:context=>{const value=context.raw;return\" $\".concat(value.toFixed(2));}}}}},plugins:[ChartDataLabels]};// Update existing chart if it exists, create new one if it doesn't\nif(chart&&isMounted){try{chart.data=chartConfig.data;chart.options=chartConfig.options;chart.update('none');// Update without animation\n}catch(error){console.error('Error updating chart:',error);// If update fails, destroy and recreate\nchart.destroy();if(isMounted){const newChart=new Chart(ctx,chartConfig);setChart(newChart);}}}else if(isMounted){const newChart=new Chart(ctx,chartConfig);setChart(newChart);}}}catch(error){console.error('Error in chart effect:',error);}// Cleanup function\nreturn()=>{isMounted=false;if(chart){try{chart.destroy();}catch(error){console.error('Error destroying chart:',error);}}};},[currentMonth,currentYear,transactions,allMonthsTransactions,isDarkMode,chart]);// Separate submit handlers for income and expenses\nconst handleIncomeSubmit=e=>{e.preventDefault();if(!incomeDescription||!incomeAmount){return;// Just return if validation fails\n}const newIncome={id:Date.now(),description:incomeDescription,amount:parseFloat(incomeAmount),type:'income',date:new Date().toISOString(),frequency:'Monthly',dueDate:new Date().toISOString().split('T')[0]};// Use addTransaction instead of directly updating transactions\naddTransaction(newIncome,'income');// Clear form\nsetIncomeDescription('');setIncomeAmount('');setIsIncomeOpen(false);// Automatically close the form after submission\n};const handleExpenseSubmit=e=>{e.preventDefault();if(!expenseDescription||!expenseAmount||!dueDate||!category){return;}// Use custom category if \"Other\" is selected\nconst finalCategory=category==='Other'?customCategory:category;const newExpense={id:Date.now(),description:expenseDescription,amount:parseFloat(expenseAmount),type:'expense',category:finalCategory,dueDate,frequency,paid:false,skipped:false,date:new Date().toISOString()};addTransaction(newExpense,'expense');// Clear form\nsetExpenseDescription('');setExpenseAmount('');setCategory('Bills');// Reset to default category\nsetCustomCategory('');// Clear custom category\nsetIsExpenseOpen(false);};const togglePaid=id=>{const monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];const monthTransaction=monthTransactions.find(t=>t.id===id);try{if(monthTransaction){setAllMonthsTransactions(prev=>{const updated=_objectSpread(_objectSpread({},prev),{},{[monthKey]:prev[monthKey].map(t=>t.id===id?_objectSpread(_objectSpread({},t),{},{paid:!t.paid,skipped:false}):t)});localStorage.setItem('allMonthsTransactions',JSON.stringify(updated));return updated;});}else{setTransactions(prev=>{const updated=prev.map(t=>t.id===id?_objectSpread(_objectSpread({},t),{},{paid:!t.paid,skipped:false}):t);localStorage.setItem('transactions',JSON.stringify(updated));return updated;});}// If chart exists, update it safely\nif(chart){requestAnimationFrame(()=>{try{chart.update('none');}catch(error){console.error('Error updating chart in togglePaid:',error);}});}}catch(error){console.error('Error in togglePaid:',error);}};const toggleSkipped=id=>{setTransactions(prev=>{const updated=prev.map(t=>t.id===id?_objectSpread(_objectSpread({},t),{},{skipped:!t.skipped,paid:false}):t);localStorage.setItem('transactions',JSON.stringify(updated));return updated;});};const deleteTransaction=(transactionId,fromMonth)=>{if(window.confirm('Delete this transaction?')){const transaction=transactions.find(t=>t.id===transactionId);if(!transaction){const monthKey=\"\".concat(currentYear,\"-\").concat(fromMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];const monthTransaction=monthTransactions.find(t=>t.id===transactionId);if(monthTransaction!==null&&monthTransaction!==void 0&&monthTransaction.originalTransactionId){const deleteAll=window.confirm('Delete all future occurrences of this recurring transaction?');if(deleteAll){const updatedMonthsTransactions=_objectSpread({},allMonthsTransactions);Object.keys(updatedMonthsTransactions).forEach(monthKey=>{const[year,month]=monthKey.split('-').map(Number);if(year>currentYear||year===currentYear&&month>=fromMonth){updatedMonthsTransactions[monthKey]=updatedMonthsTransactions[monthKey].filter(t=>t.originalTransactionId!==monthTransaction.originalTransactionId);}});setAllMonthsTransactions(updatedMonthsTransactions);localStorage.setItem('allMonthsTransactions',JSON.stringify(updatedMonthsTransactions));}else{const updatedMonthsTransactions=_objectSpread(_objectSpread({},allMonthsTransactions),{},{[monthKey]:allMonthsTransactions[monthKey].filter(t=>t.id!==transactionId)});setAllMonthsTransactions(updatedMonthsTransactions);localStorage.setItem('allMonthsTransactions',JSON.stringify(updatedMonthsTransactions));}}else{const updatedMonthsTransactions=_objectSpread(_objectSpread({},allMonthsTransactions),{},{[monthKey]:allMonthsTransactions[monthKey].filter(t=>t.id!==transactionId)});setAllMonthsTransactions(updatedMonthsTransactions);localStorage.setItem('allMonthsTransactions',JSON.stringify(updatedMonthsTransactions));}}else{const updatedTransactions=transactions.filter(t=>t.id!==transactionId);setTransactions(updatedTransactions);localStorage.setItem('transactions',JSON.stringify(updatedTransactions));}}};// Update the filterTransactions function to properly combine both sources\nconst filterTransactions=type=>{const monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];// Get transactions from both sources\nconst regularTransactions=transactions.filter(t=>{const transactionDate=new Date(t.date);return t.type===type&&transactionDate.getMonth()===currentMonth&&transactionDate.getFullYear()===currentYear;});const recurringTransactions=monthTransactions.filter(t=>t.type===type);// Combine and remove duplicates\nconst combined=[...regularTransactions,...recurringTransactions];return combined.filter((transaction,index,self)=>index===self.findIndex(t=>t.id===transaction.id));};// Update calculateTotals to include both regular and recurring transactions\nconst calculateTotals=()=>{const monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];const regularTransactions=transactions.filter(t=>{const transactionDate=new Date(t.date);return transactionDate.getMonth()===currentMonth&&transactionDate.getFullYear()===currentYear;});const allTransactions=[...regularTransactions,...monthTransactions];return{income:allTransactions.filter(t=>t.type==='income').reduce((sum,t)=>sum+t.amount,0),expenses:allTransactions.filter(t=>t.type==='expense'&&!t.skipped).reduce((sum,t)=>sum+t.amount,0),paid:allTransactions.filter(t=>t.paid).reduce((sum,t)=>sum+t.amount,0)};};// Update the saveEdit function\nconst saveEdit=id=>{var _allMonthsTransaction;const monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const isMonthTransaction=(_allMonthsTransaction=allMonthsTransactions[monthKey])===null||_allMonthsTransaction===void 0?void 0:_allMonthsTransaction.some(t=>t.id===id);if(isMonthTransaction){// Handle editing recurring transactions\nif(editingValues.originalTransactionId){const editFuture=window.confirm('Do you want to apply these changes to all future occurrences?');if(editFuture){// Update all future occurrences\nconst updatedMonthsTransactions=_objectSpread({},allMonthsTransactions);Object.keys(updatedMonthsTransactions).forEach(key=>{const[year,month]=key.split('-').map(Number);if(year>currentYear||year===currentYear&&month>=currentMonth){updatedMonthsTransactions[key]=updatedMonthsTransactions[key].map(t=>t.originalTransactionId===editingValues.originalTransactionId?_objectSpread(_objectSpread({},t),editingValues):t);}});setAllMonthsTransactions(updatedMonthsTransactions);}else{// Update only this occurrence\nsetAllMonthsTransactions(prev=>_objectSpread(_objectSpread({},prev),{},{[monthKey]:prev[monthKey].map(t=>t.id===id?_objectSpread(_objectSpread({},t),editingValues):t)}));}}else{// Update one-time transaction\nsetAllMonthsTransactions(prev=>_objectSpread(_objectSpread({},prev),{},{[monthKey]:prev[monthKey].map(t=>t.id===id?_objectSpread(_objectSpread({},t),editingValues):t)}));}}else{// Handle regular transactions\nsetTransactions(transactions.map(t=>t.id===id?_objectSpread(_objectSpread({},t),editingValues):t));}setEditingId(null);setEditingValues({});};// Update the startEditing function\nconst startEditing=transaction=>{setEditingId(transaction.id);setEditingValues(_objectSpread(_objectSpread({},transaction),{},{amount:transaction.amount.toString()}));};// Add this function to cancel editing\nconst cancelEdit=()=>{setEditingId(null);setEditingValues({});};// Add this helper function at the top of your App component\nconst getDayWithSuffix=date=>{const day=new Date(date).getDate();if(day>3&&day<21)return day+'th';switch(day%10){case 1:return day+\"st\";case 2:return day+\"nd\";case 3:return day+\"rd\";default:return day+\"th\";}};// Add this function in your App component\nconst getMonthlyTrends=()=>{const last6Months=Array.from({length:6},(_,i)=>{const d=new Date();d.setMonth(d.getMonth()-i);return d;}).reverse();return{labels:last6Months.map(date=>months[date.getMonth()]),expenses:last6Months.map(date=>{return transactions.filter(t=>{const tDate=new Date(t.date);return t.type==='expense'&&tDate.getMonth()===date.getMonth()&&!t.skipped;}).reduce((sum,t)=>sum+t.amount,0);}),income:last6Months.map(date=>{return transactions.filter(t=>{const tDate=new Date(t.date);return t.type==='income'&&tDate.getMonth()===date.getMonth();}).reduce((sum,t)=>sum+t.amount,0);})};};// Update the generateRecurringDates function\nconst generateRecurringDates=(startDate,frequency,endDate)=>{const dates=[];let currentDate=new Date(startDate);const end=new Date(endDate);// Set both dates to start of day for accurate comparison\ncurrentDate.setHours(0,0,0,0);end.setHours(0,0,0,0);console.log('Generating recurring dates:',{startDate:currentDate,endDate:end,frequency});while(currentDate<=end){dates.push(new Date(currentDate));// Store the original day of month\nconst originalDay=currentDate.getDate();// Calculate next date based on frequency\nswitch(frequency){case'Weekly':currentDate.setDate(currentDate.getDate()+7);break;case'Bi-Weekly':currentDate.setDate(currentDate.getDate()+14);break;case'Monthly':currentDate.setMonth(currentDate.getMonth()+1);// Check if we've rolled over to the next month\nif(currentDate.getDate()!==originalDay){// We've hit the end of the month, go back to last day of previous month\ncurrentDate.setDate(0);}break;default:return dates;}console.log(\"Added \".concat(frequency,\" date:\"),new Date(currentDate));}console.log('Generated dates:',dates);return dates;};// Add these wrapper functions\nconst updateTransactions=newTransactions=>{setTransactions(newTransactions);localStorage.setItem('transactions',JSON.stringify(newTransactions));};const updateMonthlyTransactions=newMonthlyTransactions=>{setAllMonthsTransactions(newMonthlyTransactions);localStorage.setItem('allMonthsTransactions',JSON.stringify(newMonthlyTransactions));};// Update the addTransaction function\nconst addTransaction=(transaction,type)=>{const endOfYear=new Date(currentYear,11,31);const isRecurring=transaction.frequency!=='One-time';const startDate=new Date(transaction.dueDate);// Ensure paid property is set for expenses\nconst transactionWithPaid=_objectSpread(_objectSpread({},transaction),{},{paid:type==='expense'?false:undefined});if(isRecurring){const recurringDates=generateRecurringDates(startDate,transaction.frequency,endOfYear);const transactionsByMonth={};recurringDates.forEach(date=>{const monthKey=\"\".concat(date.getFullYear(),\"-\").concat(date.getMonth());if(!transactionsByMonth[monthKey]){transactionsByMonth[monthKey]=[];}const recurringTransaction=_objectSpread(_objectSpread({},transactionWithPaid),{},{id:Date.now()+Math.random(),dueDate:date.toISOString().split('T')[0],originalTransactionId:transaction.id,paid:type==='expense'?false:undefined});transactionsByMonth[monthKey].push(recurringTransaction);});// Update allMonthsTransactions\nconst updatedMonthsTransactions=_objectSpread({},allMonthsTransactions);Object.entries(transactionsByMonth).forEach(_ref=>{let[monthKey,transactions]=_ref;if(!updatedMonthsTransactions[monthKey]){updatedMonthsTransactions[monthKey]=[];}updatedMonthsTransactions[monthKey]=[...updatedMonthsTransactions[monthKey],...transactions];});setAllMonthsTransactions(updatedMonthsTransactions);localStorage.setItem('allMonthsTransactions',JSON.stringify(updatedMonthsTransactions));}else{if(type==='income'){updateTransactions([...transactions,transactionWithPaid]);}else{// Handle one-time expenses\nconst transactionDate=new Date(transaction.dueDate);const monthKey=\"\".concat(transactionDate.getFullYear(),\"-\").concat(transactionDate.getMonth());const updatedMonthly=_objectSpread(_objectSpread({},allMonthsTransactions),{},{[monthKey]:[...(allMonthsTransactions[monthKey]||[]),_objectSpread(_objectSpread({},transactionWithPaid),{},{paid:false})]});updateMonthlyTransactions(updatedMonthly);}}};// In App.js, update the summary calculation\nconst calculateSummary=transactions=>{const income=transactions.filter(t=>t.type==='income').reduce((sum,t)=>sum+parseFloat(t.amount),0);const paidIncome=transactions.filter(t=>t.type==='income'&&t.paid).reduce((sum,t)=>sum+parseFloat(t.amount),0);const expenses=transactions.filter(t=>t.type==='expense').reduce((sum,t)=>sum+parseFloat(t.amount),0);const balance=paidIncome-expenses;return{income,paidIncome,expenses,balance};};// Add this function near the top of App component\nconst updateCreditCards=newCards=>{setCreditCards(newCards);localStorage.setItem('creditCards',JSON.stringify(newCards));};return/*#__PURE__*/_jsxs(\"div\",{className:\"App \".concat(isDarkMode?'dark-mode':''),children:[/*#__PURE__*/_jsxs(\"header\",{className:\"finance-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"theme-toggle\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsDarkMode(!isDarkMode),className:\"theme-toggle-btn\",title:isDarkMode?\"Switch to Light Mode\":\"Switch to Dark Mode\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-\".concat(isDarkMode?'sun':'moon')})})}),/*#__PURE__*/_jsx(\"h1\",{className:\"gradient-text\",children:\"Finance Tracker\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-navigation\",children:[/*#__PURE__*/_jsxs(Nav,{variant:\"tabs\",className:\"main-nav\",children:[/*#__PURE__*/_jsx(Nav.Item,{children:/*#__PURE__*/_jsxs(Nav.Link,{active:activeTab==='budget',onClick:()=>setActiveTab('budget'),children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-wallet me-2\"}),\"Budget Tracker\"]})}),/*#__PURE__*/_jsx(Nav.Item,{children:/*#__PURE__*/_jsxs(Nav.Link,{active:activeTab==='credit',onClick:()=>setActiveTab('credit'),children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-credit-card me-2\"}),\"Credit Cards\"]})})]}),activeTab==='budget'&&/*#__PURE__*/_jsxs(\"div\",{className:\"month-navigation\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"nav-btn prev\",onClick:()=>{if(currentMonth===0){setCurrentYear(prev=>prev-1);setCurrentMonth(11);}else{setCurrentMonth(prev=>prev-1);}},\"aria-label\":\"Previous month\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-arrow-left\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"month-select\",children:[/*#__PURE__*/_jsx(\"select\",{value:currentMonth,onChange:e=>setCurrentMonth(Number(e.target.value)),className:\"month-dropdown\",\"aria-label\":\"Select month\",children:months.map((month,index)=>/*#__PURE__*/_jsx(\"option\",{value:index,children:month},index))}),/*#__PURE__*/_jsx(\"select\",{value:currentYear,onChange:e=>setCurrentYear(Number(e.target.value)),className:\"year-dropdown\",\"aria-label\":\"Select year\",children:Array.from({length:5},(_,i)=>/*#__PURE__*/_jsx(\"option\",{value:currentYear-2+i,children:currentYear-2+i},i))})]}),/*#__PURE__*/_jsx(\"button\",{className:\"nav-btn next\",onClick:()=>{if(currentMonth===11){setCurrentYear(prev=>prev+1);setCurrentMonth(0);}else{setCurrentMonth(prev=>prev+1);}},\"aria-label\":\"Next month\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-arrow-right\"})})]})]})]}),activeTab==='budget'?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"row mb-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-row income\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Income\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-value\",children:[\"$\",calculateTotals().income.toFixed(2)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-row expenses\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Expenses\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-value\",children:[\"$\",calculateTotals().expenses.toFixed(2)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-row balance\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Balance\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-value\",children:[\"$\",(calculateTotals().income-calculateTotals().expenses).toFixed(2)]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Expense Breakdown\"}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",children:/*#__PURE__*/_jsx(\"canvas\",{id:\"expenseChart\"})})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-8 mb-4\",children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Card.Header,{className:\"bg-danger text-white\",children:/*#__PURE__*/_jsx(Button,{onClick:()=>setIsExpenseOpen(!isExpenseOpen),\"aria-controls\":\"expenseForm\",\"aria-expanded\":isExpenseOpen,variant:\"link\",className:\"text-white w-100 text-start p-0\",children:/*#__PURE__*/_jsx(\"div\",{className:\"d-flex justify-content-between align-items-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex align-items-center\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"mb-0\",children:\"Expenses\"}),/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-caret-\".concat(isExpenseOpen?'down':'right',\" ms-2 fa-lg\")})]})})})}),/*#__PURE__*/_jsx(Collapse,{in:isExpenseOpen,children:/*#__PURE__*/_jsx(\"div\",{id:\"expenseForm\",children:/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleExpenseSubmit,className:\"transaction-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:expenseDescription,onChange:e=>setExpenseDescription(e.target.value),placeholder:\"Expense Item\",className:\"form-control\",required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:expenseAmount,onChange:e=>setExpenseAmount(e.target.value),placeholder:\"Amount\",step:\"0.01\",className:\"form-control\",required:true}),/*#__PURE__*/_jsxs(\"select\",{value:category,onChange:e=>setCategory(e.target.value),className:\"form-select\",required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Category\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Bills\",children:\"Bills\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Savings\",children:\"Savings\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Personal\",children:\"Personal\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Other\",children:\"Other...\"})]}),category==='Other'&&/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:customCategory,onChange:e=>setCustomCategory(e.target.value),placeholder:\"Enter custom category\",className:\"form-control mt-2\",required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:dueDate,onChange:e=>setDueDate(e.target.value),className:\"form-control\",required:true}),/*#__PURE__*/_jsxs(\"select\",{value:frequency,onChange:e=>setFrequency(e.target.value),className:\"form-select\",required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Frequency\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Monthly\",children:\"Monthly\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Bi-Weekly\",children:\"Bi-Weekly\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Weekly\",children:\"Weekly\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-danger\",children:\"Add Expense\"})]})})})})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-4 mb-4\",children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Card.Header,{className:\"bg-success text-white\",children:/*#__PURE__*/_jsxs(Button,{onClick:()=>setIsIncomeOpen(!isIncomeOpen),\"aria-controls\":\"incomeSection\",\"aria-expanded\":isIncomeOpen,variant:\"link\",className:\"text-white w-100 text-start p-0\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"d-flex justify-content-between align-items-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex align-items-center\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"mb-0\",children:\"Income\"}),/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-caret-\".concat(isIncomeOpen?'down':'right',\" ms-2 fa-lg\")})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"current-income-display mt-2\",children:[\"Total Monthly Income: $\",calculateTotals().income.toFixed(2)]})]})}),/*#__PURE__*/_jsx(Collapse,{in:isIncomeOpen,children:/*#__PURE__*/_jsx(\"div\",{id:\"incomeSection\",children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleIncomeSubmit,className:\"transaction-form mb-4\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:incomeDescription,onChange:e=>setIncomeDescription(e.target.value),placeholder:\"Income Source\",className:\"form-control\",required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:incomeAmount,onChange:e=>setIncomeAmount(e.target.value),placeholder:\"Amount\",step:\"0.01\",className:\"form-control\",required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-success\",children:\"Add Income\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"table-responsive\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Description\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Amount\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:filterTransactions('income').map(transaction=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:editingId===transaction.id?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:editingValues.description||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{description:e.target.value})),className:\"form-control form-control-sm\"}):transaction.description}),/*#__PURE__*/_jsx(\"td\",{children:editingId===transaction.id?/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingValues.amount||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{amount:parseFloat(e.target.value)})),className:\"form-control form-control-sm\",step:\"0.01\"}):/*#__PURE__*/_jsxs(\"span\",{className:\"text-success\",children:[\"$\",transaction.amount.toFixed(2)]})}),/*#__PURE__*/_jsx(\"td\",{children:editingId===transaction.id?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>saveEdit(transaction.id),className:\"btn-icon\",title:\"Save changes\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-save\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Save\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:cancelEdit,className:\"btn-icon delete\",title:\"Cancel editing\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-times\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Cancel\"})]})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"expense-actions\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>startEditing(transaction),className:\"btn-icon\",title:\"Edit this entry\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-edit\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Edit\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>deleteTransaction(transaction.id,currentMonth),className:\"btn-icon delete\",title:\"Delete this entry\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-trash\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Delete\"})]})]})})]},transaction.id))})]})})]})})})]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col-12\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"card-header bg-danger text-white\",children:/*#__PURE__*/_jsx(\"h3\",{className:\"mb-0\",children:\"Expenses List\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"card-body\",children:/*#__PURE__*/_jsx(\"div\",{className:\"table-responsive\",children:/*#__PURE__*/_jsx(\"div\",{className:\"expense-list\",children:filterTransactions('expense').map(transaction=>/*#__PURE__*/_jsx(\"div\",{className:\"expense-item \".concat(transaction.paid?'paid':''),children:/*#__PURE__*/_jsxs(\"div\",{className:\"expense-main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"expense-checkbox\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:transaction.paid||false,onChange:()=>togglePaid(transaction.id),id:\"paid-\".concat(transaction.id)}),/*#__PURE__*/_jsx(\"label\",{className:\"checkmark\",htmlFor:\"paid-\".concat(transaction.id)})]}),/*#__PURE__*/_jsx(\"div\",{className:\"expense-content\",children:editingId===transaction.id?/*#__PURE__*/// Edit mode\n_jsxs(\"div\",{className:\"expense-edit-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:editingValues.description||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{description:e.target.value})),className:\"form-control form-control-sm mb-2\",placeholder:\"Description\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingValues.amount||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{amount:parseFloat(e.target.value)})),className:\"form-control form-control-sm mb-2\",step:\"0.01\",placeholder:\"Amount\"}),/*#__PURE__*/_jsxs(\"select\",{value:editingValues.category||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{category:e.target.value})),className:\"form-select form-select-sm mb-2\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"Bills\",children:\"Bills\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Savings\",children:\"Savings\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Personal\",children:\"Personal\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Other\",children:\"Other\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:editingValues.dueDate||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{dueDate:e.target.value})),className:\"form-control form-control-sm mb-2\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"edit-actions\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>saveEdit(transaction.id),className:\"btn btn-success btn-sm me-2\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-save\"}),\" Save\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:cancelEdit,className:\"btn btn-secondary btn-sm\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-times\"}),\" Cancel\"]})]})]}):/*#__PURE__*/// Display mode\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"expense-primary\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"expense-title\",children:transaction.description}),/*#__PURE__*/_jsxs(\"span\",{className:\"expense-amount\",children:[\"$\",transaction.amount.toFixed(2)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"expense-secondary\",children:[transaction.type==='expense'&&/*#__PURE__*/_jsx(\"span\",{className:\"expense-tag\",children:transaction.category}),/*#__PURE__*/_jsx(\"span\",{className:\"expense-date\",children:getDayWithSuffix(transaction.dueDate)}),/*#__PURE__*/_jsx(\"span\",{className:\"expense-frequency\",children:transaction.frequency})]})]})}),!editingId&&/*#__PURE__*/_jsxs(\"div\",{className:\"expense-actions\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>startEditing(transaction),className:\"btn-icon\",title:\"Edit\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-edit\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Edit\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>deleteTransaction(transaction.id,currentMonth),className:\"btn-icon delete\",title:\"Delete\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-trash\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Delete\"})]})]})]})},transaction.id))})})})]})})}),/*#__PURE__*/_jsx(MonthPage,{month:currentMonth,year:currentYear,transactions:allMonthsTransactions[\"\".concat(currentYear,\"-\").concat(currentMonth)]||[],onUpdateTransaction:addTransaction,onDeleteTransaction:deleteTransaction})]}):/*#__PURE__*/_jsx(CreditCardTracker,{creditCards:creditCards,setCreditCards:updateCreditCards})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","Chart","ChartDataLabels","Collapse","Button","Card","Nav","Line","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","MonthPage","CreditCardTracker","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","register","ThemeContext","useTheme","App","transactions","setTransactions","incomeDescription","setIncomeDescription","incomeAmount","setIncomeAmount","expenseDescription","setExpenseDescription","expenseAmount","setExpenseAmount","category","setCategory","dueDate","setDueDate","Date","toISOString","split","frequency","setFrequency","currentMonth","setCurrentMonth","getMonth","chart","setChart","isIncomeOpen","setIsIncomeOpen","isIncomeListOpen","setIsIncomeListOpen","isExpenseOpen","setIsExpenseOpen","editingId","setEditingId","editingValues","setEditingValues","isDarkMode","setIsDarkMode","currentYear","setCurrentYear","getFullYear","allMonthsTransactions","setAllMonthsTransactions","activeTab","setActiveTab","creditCards","setCreditCards","customCategory","setCustomCategory","months","loadData","savedTransactions","localStorage","getItem","savedMonthsTransactions","savedCreditCards","JSON","parse","error","console","destroy","ctx","document","getElementById","isMounted","monthKey","concat","monthTransactions","regularTransactions","filter","t","tDate","date","allTransactions","type","skipped","categoryTotals","reduce","acc","transaction","parseFloat","amount","Object","keys","length","chartConfig","data","labels","datasets","values","backgroundColor","map","borderColor","borderWidth","options","responsive","maintainAspectRatio","animation","duration","plugins","datalabels","formatter","value","toFixed","color","font","weight","size","textAlign","legend","position","generateLabels","label","i","text","fillStyle","strokeStyle","lineWidth","hidden","index","tooltip","callbacks","context","raw","update","newChart","handleIncomeSubmit","e","preventDefault","newIncome","id","now","description","addTransaction","handleExpenseSubmit","finalCategory","newExpense","paid","togglePaid","monthTransaction","find","prev","updated","_objectSpread","setItem","stringify","requestAnimationFrame","toggleSkipped","deleteTransaction","transactionId","fromMonth","window","confirm","originalTransactionId","deleteAll","updatedMonthsTransactions","forEach","year","month","Number","updatedTransactions","filterTransactions","transactionDate","recurringTransactions","combined","self","findIndex","calculateTotals","income","sum","expenses","saveEdit","_allMonthsTransaction","isMonthTransaction","some","editFuture","key","startEditing","toString","cancelEdit","getDayWithSuffix","day","getDate","getMonthlyTrends","last6Months","Array","from","_","d","setMonth","reverse","generateRecurringDates","startDate","endDate","dates","currentDate","end","setHours","log","push","originalDay","setDate","updateTransactions","newTransactions","updateMonthlyTransactions","newMonthlyTransactions","endOfYear","isRecurring","transactionWithPaid","undefined","recurringDates","transactionsByMonth","recurringTransaction","Math","random","entries","_ref","updatedMonthly","calculateSummary","paidIncome","balance","updateCreditCards","newCards","className","children","onClick","title","variant","Item","Link","active","onChange","target","Header","in","Body","onSubmit","placeholder","required","step","checked","htmlFor","onUpdateTransaction","onDeleteTransaction"],"sources":["/Users/machome/Documents/GitHub/Finance_Tracker-/src/App.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n// src/App.js\nimport React, { useState, useEffect, createContext, useContext } from 'react';\nimport './App.css';\nimport Chart from 'chart.js/auto';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { Collapse, Button, Card, Nav } from 'react-bootstrap';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n} from 'chart.js';\nimport MonthPage from './components/MonthPage';\nimport CreditCardTracker from './components/CreditCardTracker';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n);\n\n// Create theme context\nconst ThemeContext = createContext();\n\n// Add this before the App component.\nexport const useTheme = () => useContext(ThemeContext);\n\nfunction App() {\n  const [transactions, setTransactions] = useState([]);\n  const [incomeDescription, setIncomeDescription] = useState('');\n  const [incomeAmount, setIncomeAmount] = useState('');\n  const [expenseDescription, setExpenseDescription] = useState('');\n  const [expenseAmount, setExpenseAmount] = useState('');\n  const [category, setCategory] = useState('Bills');\n  const [dueDate, setDueDate] = useState(new Date().toISOString().split('T')[0]);\n  const [frequency, setFrequency] = useState('Monthly');\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\n  const [chart, setChart] = useState(null);\n  const [isIncomeOpen, setIsIncomeOpen] = useState(false);\n  const [isIncomeListOpen, setIsIncomeListOpen] = useState(true);\n  const [isExpenseOpen, setIsExpenseOpen] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [editingValues, setEditingValues] = useState({});\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const [allMonthsTransactions, setAllMonthsTransactions] = useState({});\n  const [activeTab, setActiveTab] = useState('budget');\n  const [creditCards, setCreditCards] = useState([]);\n  const [customCategory, setCustomCategory] = useState('');\n\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n  // Load transactions from localStorage on component mount\n  useEffect(() => {\n    // Load all data on mount\n    const loadData = () => {\n      try {\n        const savedTransactions = localStorage.getItem('transactions');\n        const savedMonthsTransactions = localStorage.getItem('allMonthsTransactions');\n        const savedCreditCards = localStorage.getItem('creditCards');\n\n        if (savedTransactions) {\n          setTransactions(JSON.parse(savedTransactions));\n        }\n        if (savedMonthsTransactions) {\n          setAllMonthsTransactions(JSON.parse(savedMonthsTransactions));\n        }\n        if (savedCreditCards) {\n          setCreditCards(JSON.parse(savedCreditCards));\n        }\n      } catch (error) {\n        console.error('Error loading data:', error);\n      }\n    };\n\n    loadData();\n  }, []); // Only run on mount\n\n  // Clean up chart on component unmount\n  useEffect(() => {\n    return () => {\n      if (chart) {\n        chart.destroy();\n      }\n    };\n  }, [chart]);\n\n  // Update the chart useEffect\n  useEffect(() => {\n    const ctx = document.getElementById('expenseChart');\n    if (!ctx) return;\n\n    // Create a flag to track if the component is mounted\n    let isMounted = true;\n\n    try {\n      // Get transactions for current month from both sources\n      const monthKey = `${currentYear}-${currentMonth}`;\n      const monthTransactions = allMonthsTransactions[monthKey] || [];\n      const regularTransactions = transactions.filter(t => {\n        const tDate = new Date(t.date);\n        return tDate.getMonth() === currentMonth && \n               tDate.getFullYear() === currentYear;\n      });\n\n      // Combine transactions and filter out skipped ones\n      const allTransactions = [...regularTransactions, ...monthTransactions]\n        .filter(t => t.type === 'expense' && !t.skipped);\n\n      // Calculate totals by category\n      const categoryTotals = allTransactions.reduce((acc, transaction) => {\n        if (!acc[transaction.category]) {\n          acc[transaction.category] = 0;\n        }\n        acc[transaction.category] += parseFloat(transaction.amount);\n        return acc;\n      }, {});\n\n      // Only proceed if we have data and component is mounted\n      if (Object.keys(categoryTotals).length > 0 && isMounted) {\n        const chartConfig = {\n          type: 'pie',\n          data: {\n            labels: Object.keys(categoryTotals),\n            datasets: [{\n              data: Object.values(categoryTotals),\n              backgroundColor: Object.keys(categoryTotals).map(category => \n                category === 'Bills' ? 'rgba(255, 99, 132, 0.8)' :\n                category === 'Savings' ? 'rgba(54, 162, 235, 0.8)' :\n                category === 'Personal' ? 'rgba(255, 206, 86, 0.8)' :\n                'rgba(255, 206, 86, 0.8)'\n              ),\n              borderColor: Object.keys(categoryTotals).map(category => \n                category === 'Bills' ? 'rgba(255, 99, 132, 1)' :\n                category === 'Savings' ? 'rgba(54, 162, 235, 1)' :\n                category === 'Personal' ? 'rgba(255, 206, 86, 1)' :\n                'rgba(255, 206, 86, 1)'\n              ),\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            animation: {\n              duration: 500 // Reduce animation duration\n            },\n            plugins: {\n              datalabels: {\n                formatter: (value) => `$${value.toFixed(2)}`,\n                color: '#fff',\n                font: {\n                  weight: 'bold',\n                  size: 14\n                },\n                textAlign: 'center'\n              },\n              legend: {\n                position: 'right',\n                labels: {\n                  color: isDarkMode ? '#ffffff' : '#666666',\n                  font: {\n                    size: 12\n                  },\n                  generateLabels: (chart) => {\n                    const data = chart.data;\n                    if (data.labels.length && data.datasets.length) {\n                      return data.labels.map((label, i) => {\n                        const value = data.datasets[0].data[i];\n                        return {\n                          text: `${label}: $${value.toFixed(2)}`,\n                          fillStyle: data.datasets[0].backgroundColor[i],\n                          strokeStyle: data.datasets[0].borderColor[i],\n                          lineWidth: 1,\n                          hidden: false,\n                          index: i\n                        };\n                      });\n                    }\n                    return [];\n                  }\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: (context) => {\n                    const value = context.raw;\n                    return ` $${value.toFixed(2)}`;\n                  }\n                }\n              }\n            }\n          },\n          plugins: [ChartDataLabels]\n        };\n\n        // Update existing chart if it exists, create new one if it doesn't\n        if (chart && isMounted) {\n          try {\n            chart.data = chartConfig.data;\n            chart.options = chartConfig.options;\n            chart.update('none'); // Update without animation\n          } catch (error) {\n            console.error('Error updating chart:', error);\n            // If update fails, destroy and recreate\n            chart.destroy();\n            if (isMounted) {\n              const newChart = new Chart(ctx, chartConfig);\n              setChart(newChart);\n            }\n          }\n        } else if (isMounted) {\n          const newChart = new Chart(ctx, chartConfig);\n          setChart(newChart);\n        }\n      }\n    } catch (error) {\n      console.error('Error in chart effect:', error);\n    }\n\n    // Cleanup function\n    return () => {\n      isMounted = false;\n      if (chart) {\n        try {\n          chart.destroy();\n        } catch (error) {\n          console.error('Error destroying chart:', error);\n        }\n      }\n    };\n  }, [currentMonth, currentYear, transactions, allMonthsTransactions, isDarkMode, chart]);\n\n  // Separate submit handlers for income and expenses\n  const handleIncomeSubmit = (e) => {\n    e.preventDefault();\n    if (!incomeDescription || !incomeAmount) {\n      return; // Just return if validation fails\n    }\n\n    const newIncome = {\n      id: Date.now(),\n      description: incomeDescription,\n      amount: parseFloat(incomeAmount),\n      type: 'income',\n      date: new Date().toISOString(),\n      frequency: 'Monthly',\n      dueDate: new Date().toISOString().split('T')[0]\n    };\n\n    // Use addTransaction instead of directly updating transactions\n    addTransaction(newIncome, 'income');\n    \n    // Clear form\n    setIncomeDescription('');\n    setIncomeAmount('');\n    setIsIncomeOpen(false); // Automatically close the form after submission\n  };\n\n  const handleExpenseSubmit = (e) => {\n    e.preventDefault();\n    if (!expenseDescription || !expenseAmount || !dueDate || !category) {\n      return;\n    }\n\n    // Use custom category if \"Other\" is selected\n    const finalCategory = category === 'Other' ? customCategory : category;\n\n    const newExpense = {\n      id: Date.now(),\n      description: expenseDescription,\n      amount: parseFloat(expenseAmount),\n      type: 'expense',\n      category: finalCategory,\n      dueDate,\n      frequency,\n      paid: false,\n      skipped: false,\n      date: new Date().toISOString()\n    };\n\n    addTransaction(newExpense, 'expense');\n    \n    // Clear form\n    setExpenseDescription('');\n    setExpenseAmount('');\n    setCategory('Bills'); // Reset to default category\n    setCustomCategory(''); // Clear custom category\n    setIsExpenseOpen(false);\n  };\n\n  const togglePaid = (id) => {\n    const monthKey = `${currentYear}-${currentMonth}`;\n    const monthTransactions = allMonthsTransactions[monthKey] || [];\n    const monthTransaction = monthTransactions.find(t => t.id === id);\n\n    try {\n      if (monthTransaction) {\n        setAllMonthsTransactions(prev => {\n          const updated = {\n            ...prev,\n            [monthKey]: prev[monthKey].map(t =>\n              t.id === id ? { ...t, paid: !t.paid, skipped: false } : t\n            )\n          };\n          localStorage.setItem('allMonthsTransactions', JSON.stringify(updated));\n          return updated;\n        });\n      } else {\n        setTransactions(prev => {\n          const updated = prev.map(t =>\n            t.id === id ? { ...t, paid: !t.paid, skipped: false } : t\n          );\n          localStorage.setItem('transactions', JSON.stringify(updated));\n          return updated;\n        });\n      }\n\n      // If chart exists, update it safely\n      if (chart) {\n        requestAnimationFrame(() => {\n          try {\n            chart.update('none');\n          } catch (error) {\n            console.error('Error updating chart in togglePaid:', error);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error in togglePaid:', error);\n    }\n  };\n\n  const toggleSkipped = (id) => {\n    setTransactions(prev => {\n      const updated = prev.map(t => \n        t.id === id ? { ...t, skipped: !t.skipped, paid: false } : t\n      );\n      localStorage.setItem('transactions', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  const deleteTransaction = (transactionId, fromMonth) => {\n    if (window.confirm('Delete this transaction?')) {\n      const transaction = transactions.find(t => t.id === transactionId);\n      \n      if (!transaction) {\n        const monthKey = `${currentYear}-${fromMonth}`;\n        const monthTransactions = allMonthsTransactions[monthKey] || [];\n        const monthTransaction = monthTransactions.find(t => t.id === transactionId);\n        \n        if (monthTransaction?.originalTransactionId) {\n          const deleteAll = window.confirm(\n            'Delete all future occurrences of this recurring transaction?'\n          );\n          \n          if (deleteAll) {\n            const updatedMonthsTransactions = { ...allMonthsTransactions };\n            Object.keys(updatedMonthsTransactions).forEach(monthKey => {\n              const [year, month] = monthKey.split('-').map(Number);\n              if (year > currentYear || (year === currentYear && month >= fromMonth)) {\n                updatedMonthsTransactions[monthKey] = updatedMonthsTransactions[monthKey]\n                  .filter(t => t.originalTransactionId !== monthTransaction.originalTransactionId);\n              }\n            });\n            setAllMonthsTransactions(updatedMonthsTransactions);\n            localStorage.setItem('allMonthsTransactions', JSON.stringify(updatedMonthsTransactions));\n          } else {\n            const updatedMonthsTransactions = {\n              ...allMonthsTransactions,\n              [monthKey]: allMonthsTransactions[monthKey].filter(t => t.id !== transactionId)\n            };\n            setAllMonthsTransactions(updatedMonthsTransactions);\n            localStorage.setItem('allMonthsTransactions', JSON.stringify(updatedMonthsTransactions));\n          }\n        } else {\n          const updatedMonthsTransactions = {\n            ...allMonthsTransactions,\n            [monthKey]: allMonthsTransactions[monthKey].filter(t => t.id !== transactionId)\n          };\n          setAllMonthsTransactions(updatedMonthsTransactions);\n          localStorage.setItem('allMonthsTransactions', JSON.stringify(updatedMonthsTransactions));\n        }\n      } else {\n        const updatedTransactions = transactions.filter(t => t.id !== transactionId);\n        setTransactions(updatedTransactions);\n        localStorage.setItem('transactions', JSON.stringify(updatedTransactions));\n      }\n    }\n  };\n\n  // Update the filterTransactions function to properly combine both sources\n  const filterTransactions = (type) => {\n    const monthKey = `${currentYear}-${currentMonth}`;\n    const monthTransactions = allMonthsTransactions[monthKey] || [];\n    \n    // Get transactions from both sources\n    const regularTransactions = transactions.filter(t => {\n      const transactionDate = new Date(t.date);\n      return t.type === type && \n             transactionDate.getMonth() === currentMonth &&\n             transactionDate.getFullYear() === currentYear;\n    });\n\n    const recurringTransactions = monthTransactions.filter(t => t.type === type);\n    \n    // Combine and remove duplicates\n    const combined = [...regularTransactions, ...recurringTransactions];\n    return combined.filter((transaction, index, self) =>\n      index === self.findIndex(t => t.id === transaction.id)\n    );\n  };\n\n  // Update calculateTotals to include both regular and recurring transactions\n  const calculateTotals = () => {\n    const monthKey = `${currentYear}-${currentMonth}`;\n    const monthTransactions = allMonthsTransactions[monthKey] || [];\n    \n    const regularTransactions = transactions.filter(t => {\n      const transactionDate = new Date(t.date);\n      return transactionDate.getMonth() === currentMonth &&\n             transactionDate.getFullYear() === currentYear;\n    });\n\n    const allTransactions = [...regularTransactions, ...monthTransactions];\n\n    return {\n      income: allTransactions\n        .filter(t => t.type === 'income')\n        .reduce((sum, t) => sum + t.amount, 0),\n      expenses: allTransactions\n        .filter(t => t.type === 'expense' && !t.skipped)\n        .reduce((sum, t) => sum + t.amount, 0),\n      paid: allTransactions\n        .filter(t => t.paid)\n        .reduce((sum, t) => sum + t.amount, 0)\n    };\n  };\n\n  // Update the saveEdit function\n  const saveEdit = (id) => {\n    const monthKey = `${currentYear}-${currentMonth}`;\n    const isMonthTransaction = allMonthsTransactions[monthKey]?.some(t => t.id === id);\n    \n    if (isMonthTransaction) {\n      // Handle editing recurring transactions\n      if (editingValues.originalTransactionId) {\n        const editFuture = window.confirm(\n          'Do you want to apply these changes to all future occurrences?'\n        );\n        \n        if (editFuture) {\n          // Update all future occurrences\n          const updatedMonthsTransactions = { ...allMonthsTransactions };\n          Object.keys(updatedMonthsTransactions).forEach(key => {\n            const [year, month] = key.split('-').map(Number);\n            if (year > currentYear || (year === currentYear && month >= currentMonth)) {\n              updatedMonthsTransactions[key] = updatedMonthsTransactions[key].map(t =>\n                t.originalTransactionId === editingValues.originalTransactionId\n                  ? { ...t, ...editingValues }\n                  : t\n              );\n            }\n          });\n          setAllMonthsTransactions(updatedMonthsTransactions);\n        } else {\n          // Update only this occurrence\n          setAllMonthsTransactions(prev => ({\n            ...prev,\n            [monthKey]: prev[monthKey].map(t =>\n              t.id === id ? { ...t, ...editingValues } : t\n            )\n          }));\n        }\n      } else {\n        // Update one-time transaction\n        setAllMonthsTransactions(prev => ({\n          ...prev,\n          [monthKey]: prev[monthKey].map(t =>\n            t.id === id ? { ...t, ...editingValues } : t\n          )\n        }));\n      }\n    } else {\n      // Handle regular transactions\n      setTransactions(transactions.map(t => \n        t.id === id ? { ...t, ...editingValues } : t\n      ));\n    }\n    \n    setEditingId(null);\n    setEditingValues({});\n  };\n\n  // Update the startEditing function\n  const startEditing = (transaction) => {\n    setEditingId(transaction.id);\n    setEditingValues({\n      ...transaction,\n      amount: transaction.amount.toString()\n    });\n  };\n\n  // Add this function to cancel editing\n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditingValues({});\n  };\n\n  // Add this helper function at the top of your App component\n  const getDayWithSuffix = (date) => {\n    const day = new Date(date).getDate();\n    if (day > 3 && day < 21) return day + 'th';\n    switch (day % 10) {\n      case 1: return day + \"st\";\n      case 2: return day + \"nd\";\n      case 3: return day + \"rd\";\n      default: return day + \"th\";\n    }\n  };\n\n  // Add this function in your App component\n  const getMonthlyTrends = () => {\n    const last6Months = Array.from({ length: 6 }, (_, i) => {\n      const d = new Date();\n      d.setMonth(d.getMonth() - i);\n      return d;\n    }).reverse();\n\n    return {\n      labels: last6Months.map(date => months[date.getMonth()]),\n      expenses: last6Months.map(date => {\n        return transactions\n          .filter(t => {\n            const tDate = new Date(t.date);\n            return t.type === 'expense' && \n                   tDate.getMonth() === date.getMonth() &&\n                   !t.skipped;\n          })\n          .reduce((sum, t) => sum + t.amount, 0);\n      }),\n      income: last6Months.map(date => {\n        return transactions\n          .filter(t => {\n            const tDate = new Date(t.date);\n            return t.type === 'income' && \n                   tDate.getMonth() === date.getMonth();\n          })\n          .reduce((sum, t) => sum + t.amount, 0);\n      })\n    };\n  };\n\n  // Update the generateRecurringDates function\n  const generateRecurringDates = (startDate, frequency, endDate) => {\n    const dates = [];\n    let currentDate = new Date(startDate);\n    const end = new Date(endDate);\n    \n    // Set both dates to start of day for accurate comparison\n    currentDate.setHours(0, 0, 0, 0);\n    end.setHours(0, 0, 0, 0);\n\n    console.log('Generating recurring dates:', {\n      startDate: currentDate,\n      endDate: end,\n      frequency\n    });\n\n    while (currentDate <= end) {\n      dates.push(new Date(currentDate));\n      \n      // Store the original day of month\n      const originalDay = currentDate.getDate();\n      \n      // Calculate next date based on frequency\n      switch (frequency) {\n        case 'Weekly':\n          currentDate.setDate(currentDate.getDate() + 7);\n          break;\n        case 'Bi-Weekly':\n          currentDate.setDate(currentDate.getDate() + 14);\n          break;\n        case 'Monthly':\n          currentDate.setMonth(currentDate.getMonth() + 1);\n          // Check if we've rolled over to the next month\n          if (currentDate.getDate() !== originalDay) {\n            // We've hit the end of the month, go back to last day of previous month\n            currentDate.setDate(0);\n          }\n          break;\n        default:\n          return dates;\n      }\n\n      console.log(`Added ${frequency} date:`, new Date(currentDate));\n    }\n\n    console.log('Generated dates:', dates);\n    return dates;\n  };\n\n  // Add these wrapper functions\n  const updateTransactions = (newTransactions) => {\n    setTransactions(newTransactions);\n    localStorage.setItem('transactions', JSON.stringify(newTransactions));\n  };\n\n  const updateMonthlyTransactions = (newMonthlyTransactions) => {\n    setAllMonthsTransactions(newMonthlyTransactions);\n    localStorage.setItem('allMonthsTransactions', JSON.stringify(newMonthlyTransactions));\n  };\n\n  // Update the addTransaction function\n  const addTransaction = (transaction, type) => {\n    const endOfYear = new Date(currentYear, 11, 31);\n    const isRecurring = transaction.frequency !== 'One-time';\n    const startDate = new Date(transaction.dueDate);\n\n    // Ensure paid property is set for expenses\n    const transactionWithPaid = {\n      ...transaction,\n      paid: type === 'expense' ? false : undefined\n    };\n\n    if (isRecurring) {\n      const recurringDates = generateRecurringDates(\n        startDate,\n        transaction.frequency,\n        endOfYear\n      );\n\n      const transactionsByMonth = {};\n      recurringDates.forEach(date => {\n        const monthKey = `${date.getFullYear()}-${date.getMonth()}`;\n        if (!transactionsByMonth[monthKey]) {\n          transactionsByMonth[monthKey] = [];\n        }\n\n        const recurringTransaction = {\n          ...transactionWithPaid,\n          id: Date.now() + Math.random(),\n          dueDate: date.toISOString().split('T')[0],\n          originalTransactionId: transaction.id,\n          paid: type === 'expense' ? false : undefined\n        };\n\n        transactionsByMonth[monthKey].push(recurringTransaction);\n      });\n\n      // Update allMonthsTransactions\n      const updatedMonthsTransactions = { ...allMonthsTransactions };\n      Object.entries(transactionsByMonth).forEach(([monthKey, transactions]) => {\n        if (!updatedMonthsTransactions[monthKey]) {\n          updatedMonthsTransactions[monthKey] = [];\n        }\n        updatedMonthsTransactions[monthKey] = [\n          ...updatedMonthsTransactions[monthKey],\n          ...transactions\n        ];\n      });\n\n      setAllMonthsTransactions(updatedMonthsTransactions);\n      localStorage.setItem('allMonthsTransactions', JSON.stringify(updatedMonthsTransactions));\n\n    } else {\n      if (type === 'income') {\n        updateTransactions([...transactions, transactionWithPaid]);\n      } else {\n        // Handle one-time expenses\n        const transactionDate = new Date(transaction.dueDate);\n        const monthKey = `${transactionDate.getFullYear()}-${transactionDate.getMonth()}`;\n        \n        const updatedMonthly = {\n          ...allMonthsTransactions,\n          [monthKey]: [\n            ...(allMonthsTransactions[monthKey] || []),\n            { ...transactionWithPaid, paid: false }\n          ]\n        };\n\n        updateMonthlyTransactions(updatedMonthly);\n      }\n    }\n  };\n\n  // In App.js, update the summary calculation\n  const calculateSummary = (transactions) => {\n    const income = transactions\n      .filter(t => t.type === 'income')\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n    const paidIncome = transactions\n      .filter(t => t.type === 'income' && t.paid)\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n    const expenses = transactions\n      .filter(t => t.type === 'expense')\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n    const balance = paidIncome - expenses;\n\n    return { income, paidIncome, expenses, balance };\n  };\n\n  // Add this function near the top of App component\n  const updateCreditCards = (newCards) => {\n    setCreditCards(newCards);\n    localStorage.setItem('creditCards', JSON.stringify(newCards));\n  };\n\n  return (\n    <div className={`App ${isDarkMode ? 'dark-mode' : ''}`}>\n      <header className=\"finance-header\">\n        <div className=\"theme-toggle\">\n          <button \n            onClick={() => setIsDarkMode(!isDarkMode)}\n            className=\"theme-toggle-btn\"\n            title={isDarkMode ? \"Switch to Light Mode\" : \"Switch to Dark Mode\"}\n          >\n            <i className={`fas fa-${isDarkMode ? 'sun' : 'moon'}`}></i>\n          </button>\n        </div>\n        <h1 className=\"gradient-text\">Finance Tracker</h1>\n        \n        {/* Update the navigation section */}\n        <div className=\"app-navigation\">\n          {/* Main Tabs */}\n          <Nav variant=\"tabs\" className=\"main-nav\">\n            <Nav.Item>\n              <Nav.Link \n                active={activeTab === 'budget'}\n                onClick={() => setActiveTab('budget')}\n              >\n                <i className=\"fas fa-wallet me-2\"></i>\n                Budget Tracker\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link \n                active={activeTab === 'credit'}\n                onClick={() => setActiveTab('credit')}\n              >\n                <i className=\"fas fa-credit-card me-2\"></i>\n                Credit Cards\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n\n          {/* Month Navigation - Only show for budget tab */}\n          {activeTab === 'budget' && (\n            <div className=\"month-navigation\">\n              <button \n                className=\"nav-btn prev\"\n                onClick={() => {\n                  if (currentMonth === 0) {\n                    setCurrentYear(prev => prev - 1);\n                    setCurrentMonth(11);\n                  } else {\n                    setCurrentMonth(prev => prev - 1);\n                  }\n                }}\n                aria-label=\"Previous month\"\n              >\n                <i className=\"fas fa-arrow-left\"></i>\n              </button>\n              \n              <div className=\"month-select\">\n                <select \n                  value={currentMonth}\n                  onChange={(e) => setCurrentMonth(Number(e.target.value))}\n                  className=\"month-dropdown\"\n                  aria-label=\"Select month\"\n                >\n                  {months.map((month, index) => (\n                    <option key={index} value={index}>{month}</option>\n                  ))}\n                </select>\n                <select \n                  value={currentYear}\n                  onChange={(e) => setCurrentYear(Number(e.target.value))}\n                  className=\"year-dropdown\"\n                  aria-label=\"Select year\"\n                >\n                  {Array.from({ length: 5 }, (_, i) => (\n                    <option key={i} value={currentYear - 2 + i}>\n                      {currentYear - 2 + i}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <button \n                className=\"nav-btn next\"\n                onClick={() => {\n                  if (currentMonth === 11) {\n                    setCurrentYear(prev => prev + 1);\n                    setCurrentMonth(0);\n                  } else {\n                    setCurrentMonth(prev => prev + 1);\n                  }\n                }}\n                aria-label=\"Next month\"\n              >\n                <i className=\"fas fa-arrow-right\"></i>\n              </button>\n            </div>\n          )}\n        </div>\n      </header>\n\n      {/* Conditional Rendering based on active tab */}\n      {activeTab === 'budget' ? (\n        <>\n          {/* Updated Summary Card */}\n          <div className=\"row mb-4\">\n            {/* Summary Stats - Simplified */}\n            <div className=\"mobile-summary\">\n              <div className=\"stat-card\">\n                <div className=\"stat-row income\">\n                  <div className=\"stat-label\">Income</div>\n                  <div className=\"stat-value\">${calculateTotals().income.toFixed(2)}</div>\n                </div>\n                <div className=\"stat-row expenses\">\n                  <div className=\"stat-label\">Expenses</div>\n                  <div className=\"stat-value\">${calculateTotals().expenses.toFixed(2)}</div>\n                </div>\n                <div className=\"stat-row balance\">\n                  <div className=\"stat-label\">Balance</div>\n                  <div className=\"stat-value\">${(calculateTotals().income - calculateTotals().expenses).toFixed(2)}</div>\n                </div>\n              </div>\n              \n              {/* Single Chart - Most Important View */}\n              <div className=\"chart-section\">\n                <h3>Expense Breakdown</h3>\n                <div className=\"chart-container\">\n                  <canvas id=\"expenseChart\"></canvas>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Forms Section - Side by Side */}\n          <div className=\"row\">\n            {/* Expense Form */}\n            <div className=\"col-md-8 mb-4\">\n              <Card>\n                <Card.Header className=\"bg-danger text-white\">\n                  <Button\n                    onClick={() => setIsExpenseOpen(!isExpenseOpen)}\n                    aria-controls=\"expenseForm\"\n                    aria-expanded={isExpenseOpen}\n                    variant=\"link\"\n                    className=\"text-white w-100 text-start p-0\"\n                  >\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <div className=\"d-flex align-items-center\">\n                        <h3 className=\"mb-0\">Expenses</h3>\n                        <i className={`fas fa-caret-${isExpenseOpen ? 'down' : 'right'} ms-2 fa-lg`}></i>\n                      </div>\n                    </div>\n                  </Button>\n                </Card.Header>\n                <Collapse in={isExpenseOpen}>\n                  <div id=\"expenseForm\">\n                    <Card.Body>\n                      <form onSubmit={handleExpenseSubmit} className=\"transaction-form\">\n                        <input\n                          type=\"text\"\n                          value={expenseDescription}\n                          onChange={(e) => setExpenseDescription(e.target.value)}\n                          placeholder=\"Expense Item\"\n                          className=\"form-control\"\n                          required\n                        />\n                        <input\n                          type=\"number\"\n                          value={expenseAmount}\n                          onChange={(e) => setExpenseAmount(e.target.value)}\n                          placeholder=\"Amount\"\n                          step=\"0.01\"\n                          className=\"form-control\"\n                          required\n                        />\n                        <select \n                          value={category} \n                          onChange={(e) => setCategory(e.target.value)}\n                          className=\"form-select\"\n                          required\n                        >\n                          <option value=\"\">Select Category</option>\n                          <option value=\"Bills\">Bills</option>\n                          <option value=\"Savings\">Savings</option>\n                          <option value=\"Personal\">Personal</option>\n                          <option value=\"Other\">Other...</option>\n                        </select>\n                        {/* Show custom category input when \"Other\" is selected */}\n                        {category === 'Other' && (\n                          <input\n                            type=\"text\"\n                            value={customCategory}\n                            onChange={(e) => setCustomCategory(e.target.value)}\n                            placeholder=\"Enter custom category\"\n                            className=\"form-control mt-2\"\n                            required\n                          />\n                        )}\n                        <input\n                          type=\"date\"\n                          value={dueDate}\n                          onChange={(e) => setDueDate(e.target.value)}\n                          className=\"form-control\"\n                          required\n                        />\n                        <select \n                          value={frequency} \n                          onChange={(e) => setFrequency(e.target.value)}\n                          className=\"form-select\"\n                          required\n                        >\n                          <option value=\"\">Select Frequency</option>\n                          <option value=\"Monthly\">Monthly</option>\n                          <option value=\"Bi-Weekly\">Bi-Weekly</option>\n                          <option value=\"Weekly\">Weekly</option>\n                        </select>\n                        <button type=\"submit\" className=\"btn btn-danger\">\n                          Add Expense\n                        </button>\n                      </form>\n                    </Card.Body>\n                  </div>\n                </Collapse>\n              </Card>\n            </div>\n\n            {/* Income Form */}\n            <div className=\"col-md-4 mb-4\">\n              <Card>\n                <Card.Header className=\"bg-success text-white\">\n                  <Button\n                    onClick={() => setIsIncomeOpen(!isIncomeOpen)}\n                    aria-controls=\"incomeSection\"\n                    aria-expanded={isIncomeOpen}\n                    variant=\"link\"\n                    className=\"text-white w-100 text-start p-0\"\n                  >\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <div className=\"d-flex align-items-center\">\n                        <h3 className=\"mb-0\">Income</h3>\n                        <i className={`fas fa-caret-${isIncomeOpen ? 'down' : 'right'} ms-2 fa-lg`}></i>\n                      </div>\n                    </div>\n                    <div className=\"current-income-display mt-2\">\n                      Total Monthly Income: ${calculateTotals().income.toFixed(2)}\n                    </div>\n                  </Button>\n                </Card.Header>\n                <Collapse in={isIncomeOpen}>\n                  <div id=\"incomeSection\">\n                    <Card.Body>\n                      <form onSubmit={handleIncomeSubmit} className=\"transaction-form mb-4\">\n                        <input\n                          type=\"text\"\n                          value={incomeDescription}\n                          onChange={(e) => setIncomeDescription(e.target.value)}\n                          placeholder=\"Income Source\"\n                          className=\"form-control\"\n                          required\n                        />\n                        <input\n                          type=\"number\"\n                          value={incomeAmount}\n                          onChange={(e) => setIncomeAmount(e.target.value)}\n                          placeholder=\"Amount\"\n                          step=\"0.01\"\n                          className=\"form-control\"\n                          required\n                        />\n                        <button type=\"submit\" className=\"btn btn-success\">\n                          Add Income\n                        </button>\n                      </form>\n                      <div className=\"table-responsive\">\n                        <table className=\"table\">\n                          <thead>\n                            <tr>\n                              <th>Description</th>\n                              <th>Amount</th>\n                              <th>Actions</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {filterTransactions('income').map(transaction => (\n                              <tr key={transaction.id}>\n                                <td>\n                                  {editingId === transaction.id ? (\n                                    <input\n                                      type=\"text\"\n                                      value={editingValues.description || ''}\n                                      onChange={(e) => setEditingValues({\n                                        ...editingValues,\n                                        description: e.target.value\n                                      })}\n                                      className=\"form-control form-control-sm\"\n                                    />\n                                  ) : (\n                                    transaction.description\n                                  )}\n                                </td>\n                                <td>\n                                  {editingId === transaction.id ? (\n                                    <input\n                                      type=\"number\"\n                                      value={editingValues.amount || ''}\n                                      onChange={(e) => setEditingValues({\n                                        ...editingValues,\n                                        amount: parseFloat(e.target.value)\n                                      })}\n                                      className=\"form-control form-control-sm\"\n                                      step=\"0.01\"\n                                    />\n                                  ) : (\n                                    <span className=\"text-success\">${transaction.amount.toFixed(2)}</span>\n                                  )}\n                                </td>\n                                <td>\n                                  {editingId === transaction.id ? (\n                                    <>\n                                      <button\n                                        onClick={() => saveEdit(transaction.id)}\n                                        className=\"btn-icon\"\n                                        title=\"Save changes\"\n                                      >\n                                        <i className=\"fas fa-save\"></i>\n                                        <span>Save</span>\n                                      </button>\n                                      <button\n                                        onClick={cancelEdit}\n                                        className=\"btn-icon delete\"\n                                        title=\"Cancel editing\"\n                                      >\n                                        <i className=\"fas fa-times\"></i>\n                                        <span>Cancel</span>\n                                      </button>\n                                    </>\n                                  ) : (\n                                    <div className=\"expense-actions\">\n                                      <button\n                                        onClick={() => startEditing(transaction)}\n                                        className=\"btn-icon\"\n                                        title=\"Edit this entry\"\n                                      >\n                                        <i className=\"fas fa-edit\"></i>\n                                        <span>Edit</span>\n                                      </button>\n                                      <button\n                                        onClick={() => deleteTransaction(transaction.id, currentMonth)}\n                                        className=\"btn-icon delete\"\n                                        title=\"Delete this entry\"\n                                      >\n                                        <i className=\"fas fa-trash\"></i>\n                                        <span>Delete</span>\n                                      </button>\n                                    </div>\n                                  )}\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    </Card.Body>\n                  </div>\n                </Collapse>\n              </Card>\n            </div>\n          </div>\n\n          {/* Full Width Expenses List */}\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"card\">\n                <div className=\"card-header bg-danger text-white\">\n                  <h3 className=\"mb-0\">Expenses List</h3>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"table-responsive\">\n                    {/* Mobile-Friendly Expense List */}\n                    <div className=\"expense-list\">\n                      {filterTransactions('expense').map(transaction => (\n                        <div key={transaction.id} className={`expense-item ${transaction.paid ? 'paid' : ''}`}>\n                          <div className=\"expense-main\">\n                            <div className=\"expense-checkbox\">\n                              <input\n                                type=\"checkbox\"\n                                checked={transaction.paid || false}\n                                onChange={() => togglePaid(transaction.id)}\n                                id={`paid-${transaction.id}`}\n                              />\n                              <label className=\"checkmark\" htmlFor={`paid-${transaction.id}`}></label>\n                            </div>\n                            <div className=\"expense-content\">\n                              {editingId === transaction.id ? (\n                                // Edit mode\n                                <div className=\"expense-edit-form\">\n                                  <input\n                                    type=\"text\"\n                                    value={editingValues.description || ''}\n                                    onChange={(e) => setEditingValues({\n                                      ...editingValues,\n                                      description: e.target.value\n                                    })}\n                                    className=\"form-control form-control-sm mb-2\"\n                                    placeholder=\"Description\"\n                                  />\n                                  <input\n                                    type=\"number\"\n                                    value={editingValues.amount || ''}\n                                    onChange={(e) => setEditingValues({\n                                      ...editingValues,\n                                      amount: parseFloat(e.target.value)\n                                    })}\n                                    className=\"form-control form-control-sm mb-2\"\n                                    step=\"0.01\"\n                                    placeholder=\"Amount\"\n                                  />\n                                  <select\n                                    value={editingValues.category || ''}\n                                    onChange={(e) => setEditingValues({\n                                      ...editingValues,\n                                      category: e.target.value\n                                    })}\n                                    className=\"form-select form-select-sm mb-2\"\n                                  >\n                                    <option value=\"Bills\">Bills</option>\n                                    <option value=\"Savings\">Savings</option>\n                                    <option value=\"Personal\">Personal</option>\n                                    <option value=\"Other\">Other</option>\n                                  </select>\n                                  <input\n                                    type=\"date\"\n                                    value={editingValues.dueDate || ''}\n                                    onChange={(e) => setEditingValues({\n                                      ...editingValues,\n                                      dueDate: e.target.value\n                                    })}\n                                    className=\"form-control form-control-sm mb-2\"\n                                  />\n                                  <div className=\"edit-actions\">\n                                    <button\n                                      onClick={() => saveEdit(transaction.id)}\n                                      className=\"btn btn-success btn-sm me-2\"\n                                    >\n                                      <i className=\"fas fa-save\"></i> Save\n                                    </button>\n                                    <button\n                                      onClick={cancelEdit}\n                                      className=\"btn btn-secondary btn-sm\"\n                                    >\n                                      <i className=\"fas fa-times\"></i> Cancel\n                                    </button>\n                                  </div>\n                                </div>\n                              ) : (\n                                // Display mode\n                                <>\n                                  <div className=\"expense-primary\">\n                                    <span className=\"expense-title\">{transaction.description}</span>\n                                    <span className=\"expense-amount\">${transaction.amount.toFixed(2)}</span>\n                                  </div>\n                                  <div className=\"expense-secondary\">\n                                    {transaction.type === 'expense' && (\n                                      <span className=\"expense-tag\">{transaction.category}</span>\n                                    )}\n                                    <span className=\"expense-date\">{getDayWithSuffix(transaction.dueDate)}</span>\n                                    <span className=\"expense-frequency\">{transaction.frequency}</span>\n                                  </div>\n                                </>\n                              )}\n                            </div>\n                            {!editingId && (\n                              <div className=\"expense-actions\">\n                                <button\n                                  onClick={() => startEditing(transaction)}\n                                  className=\"btn-icon\"\n                                  title=\"Edit\"\n                                >\n                                  <i className=\"fas fa-edit\"></i>\n                                  <span>Edit</span>\n                                </button>\n                                <button\n                                  onClick={() => deleteTransaction(transaction.id, currentMonth)}\n                                  className=\"btn-icon delete\"\n                                  title=\"Delete\"\n                                >\n                                  <i className=\"fas fa-trash\"></i>\n                                  <span>Delete</span>\n                                </button>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Render current month's page */}\n          <MonthPage\n            month={currentMonth}\n            year={currentYear}\n            transactions={allMonthsTransactions[`${currentYear}-${currentMonth}`] || []}\n            onUpdateTransaction={addTransaction}\n            onDeleteTransaction={deleteTransaction}\n          />\n        </>\n      ) : (\n        <CreditCardTracker \n          creditCards={creditCards} \n          setCreditCards={updateCreditCards}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}