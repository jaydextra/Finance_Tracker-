{"ast":null,"code":"import _objectSpread from\"/Users/machome/Documents/GitHub/Finance_Tracker-/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/* eslint-disable no-unused-vars */// src/App.js\nimport React,{useState,useEffect,createContext,useContext}from'react';import'./App.css';import Chart from'chart.js/auto';import ChartDataLabels from'chartjs-plugin-datalabels';import{Collapse,Button,Card,Nav}from'react-bootstrap';import{Line}from'react-chartjs-2';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,ArcElement}from'chart.js';import MonthPage from'./components/MonthPage';import CreditCardTracker from'./components/CreditCardTracker';// Register ChartJS components\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,ArcElement);// Create theme context\nconst ThemeContext=/*#__PURE__*/createContext();// Add this before the App component\nexport const useTheme=()=>useContext(ThemeContext);function App(){const[transactions,setTransactions]=useState([]);const[incomeDescription,setIncomeDescription]=useState('');const[incomeAmount,setIncomeAmount]=useState('');const[expenseDescription,setExpenseDescription]=useState('');const[expenseAmount,setExpenseAmount]=useState('');const[category,setCategory]=useState('Bills');const[dueDate,setDueDate]=useState(new Date().toISOString().split('T')[0]);const[frequency,setFrequency]=useState('Monthly');const[currentMonth,setCurrentMonth]=useState(new Date().getMonth());const[chart,setChart]=useState(null);const[isIncomeOpen,setIsIncomeOpen]=useState(false);const[isIncomeListOpen,setIsIncomeListOpen]=useState(true);const[isExpenseOpen,setIsExpenseOpen]=useState(false);const[editingId,setEditingId]=useState(null);const[editingValues,setEditingValues]=useState({});const[isDarkMode,setIsDarkMode]=useState(false);const[currentYear,setCurrentYear]=useState(new Date().getFullYear());const[allMonthsTransactions,setAllMonthsTransactions]=useState({});const[activeTab,setActiveTab]=useState('budget');const months=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];// Load transactions from localStorage on component mount\nuseEffect(()=>{const savedTransactions=localStorage.getItem('transactions');if(savedTransactions){setTransactions(JSON.parse(savedTransactions));}},[]);// Save transactions to localStorage whenever they change\nuseEffect(()=>{localStorage.setItem('transactions',JSON.stringify(transactions));},[transactions]);// Clean up chart on component unmount\nuseEffect(()=>{return()=>{if(chart){chart.destroy();}};},[chart]);// Add this new useEffect to handle localStorage for allMonthsTransactions\nuseEffect(()=>{const savedMonthsTransactions=localStorage.getItem('allMonthsTransactions');if(savedMonthsTransactions){setAllMonthsTransactions(JSON.parse(savedMonthsTransactions));}},[]);// Add this useEffect to save allMonthsTransactions when it changes\nuseEffect(()=>{localStorage.setItem('allMonthsTransactions',JSON.stringify(allMonthsTransactions));},[allMonthsTransactions]);// Update the chart update useEffect\nuseEffect(()=>{const ctx=document.getElementById('expenseChart');if(!ctx)return;// Destroy existing chart\nif(chart){chart.destroy();}// Get all transactions for the current month\nconst monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];// Combine regular and monthly transactions\nconst allTransactions=[...transactions.filter(t=>{const tDate=new Date(t.date);return tDate.getMonth()===currentMonth&&tDate.getFullYear()===currentYear;}),...monthTransactions];const categoryTotals=allTransactions.reduce((acc,transaction)=>{if(transaction.type==='expense'&&!transaction.skipped){acc[transaction.category]=(acc[transaction.category]||0)+transaction.amount;}return acc;},{});// Only create new chart if there's data to display\nif(Object.keys(categoryTotals).length>0){const newChart=new Chart(ctx,{type:'pie',data:{labels:Object.keys(categoryTotals),datasets:[{data:Object.values(categoryTotals),backgroundColor:['rgba(255, 99, 132, 0.8)','rgba(54, 162, 235, 0.8)','rgba(255, 206, 86, 0.8)','rgba(75, 192, 192, 0.8)'],borderColor:['rgba(255, 99, 132, 1)','rgba(54, 162, 235, 1)','rgba(255, 206, 86, 1)','rgba(75, 192, 192, 1)'],borderWidth:1}]},options:{responsive:true,maintainAspectRatio:false,plugins:{datalabels:{formatter:value=>\"$\".concat(value.toFixed(2)),color:'white',font:{weight:'bold',size:12}},legend:{position:'right',labels:{color:isDarkMode?'#ffffff':'#666666',font:{size:12}}}}},plugins:[ChartDataLabels]});setChart(newChart);}},[currentMonth,currentYear,transactions,allMonthsTransactions,isDarkMode,chart]);// Separate submit handlers for income and expenses\nconst handleIncomeSubmit=e=>{e.preventDefault();if(!incomeDescription||!incomeAmount){alert(\"Please fill in all required fields.\");return;}const newIncome={id:Date.now(),description:incomeDescription,amount:parseFloat(incomeAmount),type:'income',date:new Date().toISOString(),frequency:'Monthly',// Add default frequency for income\ndueDate:new Date().toISOString().split('T')[0]// Add current date as due date\n};// Use addTransaction instead of directly updating transactions\naddTransaction(newIncome,'income');// Clear form\nsetIncomeDescription('');setIncomeAmount('');alert('Income added successfully!');};const handleExpenseSubmit=e=>{e.preventDefault();if(!expenseDescription||!expenseAmount||!dueDate||!category){alert(\"Please fill in all required fields.\");return;}const newExpense={id:Date.now(),description:expenseDescription,amount:parseFloat(expenseAmount),type:'expense',category,dueDate,frequency,paid:false,skipped:false,date:new Date().toISOString()};// Use addTransaction instead of directly updating transactions\naddTransaction(newExpense,'expense');// Clear form\nsetExpenseDescription('');setExpenseAmount('');alert('Expense added successfully!');};const togglePaid=id=>{// Check if the transaction is in allMonthsTransactions\nconst monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];const monthTransaction=monthTransactions.find(t=>t.id===id);if(monthTransaction){// Update in allMonthsTransactions\nsetAllMonthsTransactions(prev=>_objectSpread(_objectSpread({},prev),{},{[monthKey]:prev[monthKey].map(t=>t.id===id?_objectSpread(_objectSpread({},t),{},{paid:!t.paid,skipped:false}):t)}));}else{// Update in regular transactions\nsetTransactions(transactions.map(t=>t.id===id?_objectSpread(_objectSpread({},t),{},{paid:!t.paid,skipped:false}):t));}};const toggleSkipped=id=>{setTransactions(transactions.map(t=>t.id===id?_objectSpread(_objectSpread({},t),{},{skipped:!t.skipped,paid:false}):t));};const deleteTransaction=(transactionId,fromMonth)=>{if(window.confirm('Delete this transaction?')){const transaction=transactions.find(t=>t.id===transactionId);if(!transaction){// Check in allMonthsTransactions if not found in transactions\nconst monthKey=\"\".concat(currentYear,\"-\").concat(fromMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];const monthTransaction=monthTransactions.find(t=>t.id===transactionId);if(monthTransaction!==null&&monthTransaction!==void 0&&monthTransaction.originalTransactionId){// If it's a recurring transaction, ask if they want to delete all future occurrences\nconst deleteAll=window.confirm('Delete all future occurrences of this recurring transaction?');if(deleteAll){// Delete from current month forward\nconst updatedMonthsTransactions=_objectSpread({},allMonthsTransactions);Object.keys(updatedMonthsTransactions).forEach(monthKey=>{const[year,month]=monthKey.split('-').map(Number);if(year>currentYear||year===currentYear&&month>=fromMonth){updatedMonthsTransactions[monthKey]=updatedMonthsTransactions[monthKey].filter(t=>t.originalTransactionId!==monthTransaction.originalTransactionId);}});setAllMonthsTransactions(updatedMonthsTransactions);}else{// Delete only this occurrence\nsetAllMonthsTransactions(prev=>_objectSpread(_objectSpread({},prev),{},{[monthKey]:prev[monthKey].filter(t=>t.id!==transactionId)}));}}else{// Handle one-time transaction deletion\nsetAllMonthsTransactions(prev=>_objectSpread(_objectSpread({},prev),{},{[monthKey]:prev[monthKey].filter(t=>t.id!==transactionId)}));}}else{// Handle deletion from regular transactions array\nsetTransactions(transactions.filter(t=>t.id!==transactionId));}}};// Update the filterTransactions function to properly combine both sources\nconst filterTransactions=type=>{const monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];// Get transactions from both sources\nconst regularTransactions=transactions.filter(t=>{const transactionDate=new Date(t.date);return t.type===type&&transactionDate.getMonth()===currentMonth&&transactionDate.getFullYear()===currentYear;});const recurringTransactions=monthTransactions.filter(t=>t.type===type);// Combine and remove duplicates\nconst combined=[...regularTransactions,...recurringTransactions];return combined.filter((transaction,index,self)=>index===self.findIndex(t=>t.id===transaction.id));};// Update calculateTotals to include both regular and recurring transactions\nconst calculateTotals=()=>{const monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const monthTransactions=allMonthsTransactions[monthKey]||[];const regularTransactions=transactions.filter(t=>{const transactionDate=new Date(t.date);return transactionDate.getMonth()===currentMonth&&transactionDate.getFullYear()===currentYear;});const allTransactions=[...regularTransactions,...monthTransactions];return{income:allTransactions.filter(t=>t.type==='income').reduce((sum,t)=>sum+t.amount,0),expenses:allTransactions.filter(t=>t.type==='expense'&&!t.skipped).reduce((sum,t)=>sum+t.amount,0),paid:allTransactions.filter(t=>t.paid).reduce((sum,t)=>sum+t.amount,0)};};// Update the saveEdit function\nconst saveEdit=id=>{var _allMonthsTransaction;const monthKey=\"\".concat(currentYear,\"-\").concat(currentMonth);const isMonthTransaction=(_allMonthsTransaction=allMonthsTransactions[monthKey])===null||_allMonthsTransaction===void 0?void 0:_allMonthsTransaction.some(t=>t.id===id);if(isMonthTransaction){// Handle editing recurring transactions\nif(editingValues.originalTransactionId){const editFuture=window.confirm('Do you want to apply these changes to all future occurrences?');if(editFuture){// Update all future occurrences\nconst updatedMonthsTransactions=_objectSpread({},allMonthsTransactions);Object.keys(updatedMonthsTransactions).forEach(key=>{const[year,month]=key.split('-').map(Number);if(year>currentYear||year===currentYear&&month>=currentMonth){updatedMonthsTransactions[key]=updatedMonthsTransactions[key].map(t=>t.originalTransactionId===editingValues.originalTransactionId?_objectSpread(_objectSpread({},t),editingValues):t);}});setAllMonthsTransactions(updatedMonthsTransactions);}else{// Update only this occurrence\nsetAllMonthsTransactions(prev=>_objectSpread(_objectSpread({},prev),{},{[monthKey]:prev[monthKey].map(t=>t.id===id?_objectSpread(_objectSpread({},t),editingValues):t)}));}}else{// Update one-time transaction\nsetAllMonthsTransactions(prev=>_objectSpread(_objectSpread({},prev),{},{[monthKey]:prev[monthKey].map(t=>t.id===id?_objectSpread(_objectSpread({},t),editingValues):t)}));}}else{// Handle regular transactions\nsetTransactions(transactions.map(t=>t.id===id?_objectSpread(_objectSpread({},t),editingValues):t));}setEditingId(null);setEditingValues({});};// Update the startEditing function\nconst startEditing=transaction=>{setEditingId(transaction.id);setEditingValues(_objectSpread(_objectSpread({},transaction),{},{amount:transaction.amount.toString()}));};// Add this function to cancel editing\nconst cancelEdit=()=>{setEditingId(null);setEditingValues({});};// Add this helper function at the top of your App component\nconst getDayWithSuffix=date=>{const day=new Date(date).getDate();if(day>3&&day<21)return day+'th';switch(day%10){case 1:return day+\"st\";case 2:return day+\"nd\";case 3:return day+\"rd\";default:return day+\"th\";}};// Add this function in your App component\nconst getMonthlyTrends=()=>{const last6Months=Array.from({length:6},(_,i)=>{const d=new Date();d.setMonth(d.getMonth()-i);return d;}).reverse();return{labels:last6Months.map(date=>months[date.getMonth()]),expenses:last6Months.map(date=>{return transactions.filter(t=>{const tDate=new Date(t.date);return t.type==='expense'&&tDate.getMonth()===date.getMonth()&&!t.skipped;}).reduce((sum,t)=>sum+t.amount,0);}),income:last6Months.map(date=>{return transactions.filter(t=>{const tDate=new Date(t.date);return t.type==='income'&&tDate.getMonth()===date.getMonth();}).reduce((sum,t)=>sum+t.amount,0);})};};// Update the generateRecurringDates function\nconst generateRecurringDates=(startDate,frequency,endDate)=>{const dates=[];let currentDate=new Date(startDate);const end=new Date(endDate);// Set both dates to start of day for accurate comparison\ncurrentDate.setHours(0,0,0,0);end.setHours(0,0,0,0);console.log('Generating recurring dates:',{startDate:currentDate,endDate:end,frequency});while(currentDate<=end){dates.push(new Date(currentDate));// Store the original day of month\nconst originalDay=currentDate.getDate();// Calculate next date based on frequency\nswitch(frequency){case'Weekly':currentDate.setDate(currentDate.getDate()+7);break;case'Bi-Weekly':currentDate.setDate(currentDate.getDate()+14);break;case'Monthly':currentDate.setMonth(currentDate.getMonth()+1);// Check if we've rolled over to the next month\nif(currentDate.getDate()!==originalDay){// We've hit the end of the month, go back to last day of previous month\ncurrentDate.setDate(0);}break;default:return dates;}console.log(\"Added \".concat(frequency,\" date:\"),new Date(currentDate));}console.log('Generated dates:',dates);return dates;};// Update the addTransaction function\nconst addTransaction=(transaction,type)=>{const endOfYear=new Date(currentYear,11,31);const isRecurring=transaction.frequency!=='One-time';const startDate=new Date(transaction.dueDate);console.log('Adding transaction:',{transaction,type,isRecurring,startDate,endOfYear});if(isRecurring){const recurringDates=generateRecurringDates(startDate,transaction.frequency,endOfYear);console.log('Generated recurring dates:',recurringDates.length);// Group transactions by month\nconst transactionsByMonth={};recurringDates.forEach(date=>{const monthKey=\"\".concat(date.getFullYear(),\"-\").concat(date.getMonth());if(!transactionsByMonth[monthKey]){transactionsByMonth[monthKey]=[];}const recurringTransaction=_objectSpread(_objectSpread({},transaction),{},{id:Date.now()+Math.random(),// Ensure unique IDs\ndueDate:date.toISOString().split('T')[0],originalTransactionId:transaction.id,paid:false// Reset paid status for each occurrence\n});transactionsByMonth[monthKey].push(recurringTransaction);});console.log('Transactions grouped by month:',transactionsByMonth);// Update allMonthsTransactions\nsetAllMonthsTransactions(prev=>{const updated=_objectSpread({},prev);Object.entries(transactionsByMonth).forEach(_ref=>{let[monthKey,transactions]=_ref;if(!updated[monthKey]){updated[monthKey]=[];}updated[monthKey]=[...updated[monthKey],...transactions];});return updated;});}else{// Handle one-time transactions\nconst transactionDate=new Date(transaction.dueDate);const monthKey=\"\".concat(transactionDate.getFullYear(),\"-\").concat(transactionDate.getMonth());setAllMonthsTransactions(prev=>_objectSpread(_objectSpread({},prev),{},{[monthKey]:[...(prev[monthKey]||[]),_objectSpread(_objectSpread({},transaction),{},{paid:false})]}));}};// In App.js, update the summary calculation\nconst calculateSummary=transactions=>{const income=transactions.filter(t=>t.type==='income').reduce((sum,t)=>sum+parseFloat(t.amount),0);const paidIncome=transactions.filter(t=>t.type==='income'&&t.paid).reduce((sum,t)=>sum+parseFloat(t.amount),0);const expenses=transactions.filter(t=>t.type==='expense').reduce((sum,t)=>sum+parseFloat(t.amount),0);const balance=paidIncome-expenses;return{income,paidIncome,expenses,balance};};return/*#__PURE__*/_jsxs(\"div\",{className:\"App \".concat(isDarkMode?'dark-mode':''),children:[/*#__PURE__*/_jsxs(\"header\",{className:\"finance-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"theme-toggle\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>setIsDarkMode(!isDarkMode),className:\"theme-toggle-btn\",title:isDarkMode?\"Switch to Light Mode\":\"Switch to Dark Mode\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-\".concat(isDarkMode?'sun':'moon')})})}),/*#__PURE__*/_jsx(\"h1\",{className:\"gradient-text\",children:\"Finance Tracker\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-navigation\",children:[/*#__PURE__*/_jsxs(Nav,{variant:\"tabs\",className:\"main-nav\",children:[/*#__PURE__*/_jsx(Nav.Item,{children:/*#__PURE__*/_jsxs(Nav.Link,{active:activeTab==='budget',onClick:()=>setActiveTab('budget'),children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-wallet me-2\"}),\"Budget Tracker\"]})}),/*#__PURE__*/_jsx(Nav.Item,{children:/*#__PURE__*/_jsxs(Nav.Link,{active:activeTab==='credit',onClick:()=>setActiveTab('credit'),children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-credit-card me-2\"}),\"Credit Cards\"]})})]}),activeTab==='budget'&&/*#__PURE__*/_jsxs(\"div\",{className:\"month-navigation\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"nav-btn prev\",onClick:()=>{if(currentMonth===0){setCurrentYear(prev=>prev-1);setCurrentMonth(11);}else{setCurrentMonth(prev=>prev-1);}},\"aria-label\":\"Previous month\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-arrow-left\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"month-select\",children:[/*#__PURE__*/_jsx(\"select\",{value:currentMonth,onChange:e=>setCurrentMonth(Number(e.target.value)),className:\"month-dropdown\",\"aria-label\":\"Select month\",children:months.map((month,index)=>/*#__PURE__*/_jsx(\"option\",{value:index,children:month},index))}),/*#__PURE__*/_jsx(\"select\",{value:currentYear,onChange:e=>setCurrentYear(Number(e.target.value)),className:\"year-dropdown\",\"aria-label\":\"Select year\",children:Array.from({length:5},(_,i)=>/*#__PURE__*/_jsx(\"option\",{value:currentYear-2+i,children:currentYear-2+i},i))})]}),/*#__PURE__*/_jsx(\"button\",{className:\"nav-btn next\",onClick:()=>{if(currentMonth===11){setCurrentYear(prev=>prev+1);setCurrentMonth(0);}else{setCurrentMonth(prev=>prev+1);}},\"aria-label\":\"Next month\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-arrow-right\"})})]})]})]}),activeTab==='budget'?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"row mb-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-row income\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Income\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-value\",children:[\"$\",calculateTotals().income.toFixed(2)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-row expenses\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Expenses\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-value\",children:[\"$\",calculateTotals().expenses.toFixed(2)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-row balance\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Balance\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-value\",children:[\"$\",(calculateTotals().income-calculateTotals().expenses).toFixed(2)]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Expense Breakdown\"}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",children:/*#__PURE__*/_jsx(\"canvas\",{id:\"expenseChart\"})})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-8 mb-4\",children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Card.Header,{className:\"bg-danger text-white\",children:/*#__PURE__*/_jsx(Button,{onClick:()=>setIsExpenseOpen(!isExpenseOpen),\"aria-controls\":\"expenseForm\",\"aria-expanded\":isExpenseOpen,variant:\"link\",className:\"text-white w-100 text-start p-0\",children:/*#__PURE__*/_jsx(\"div\",{className:\"d-flex justify-content-between align-items-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex align-items-center\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"mb-0\",children:\"Expenses\"}),/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-caret-\".concat(isExpenseOpen?'down':'right',\" ms-2 fa-lg\")})]})})})}),/*#__PURE__*/_jsx(Collapse,{in:isExpenseOpen,children:/*#__PURE__*/_jsx(\"div\",{id:\"expenseForm\",children:/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleExpenseSubmit,className:\"transaction-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:expenseDescription,onChange:e=>setExpenseDescription(e.target.value),placeholder:\"Expense Item\",className:\"form-control\",required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:expenseAmount,onChange:e=>setExpenseAmount(e.target.value),placeholder:\"Amount\",step:\"0.01\",className:\"form-control\",required:true}),/*#__PURE__*/_jsxs(\"select\",{value:category,onChange:e=>setCategory(e.target.value),className:\"form-select\",required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Category\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Bills\",children:\"Bills\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Savings\",children:\"Savings\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Personal\",children:\"Personal\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Other\",children:\"Other\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:dueDate,onChange:e=>setDueDate(e.target.value),className:\"form-control\",required:true}),/*#__PURE__*/_jsxs(\"select\",{value:frequency,onChange:e=>setFrequency(e.target.value),className:\"form-select\",required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Frequency\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Monthly\",children:\"Monthly\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Bi-Weekly\",children:\"Bi-Weekly\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Weekly\",children:\"Weekly\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-danger\",children:\"Add Expense\"})]})})})})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-4 mb-4\",children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Card.Header,{className:\"bg-success text-white\",children:/*#__PURE__*/_jsxs(Button,{onClick:()=>setIsIncomeOpen(!isIncomeOpen),\"aria-controls\":\"incomeSection\",\"aria-expanded\":isIncomeOpen,variant:\"link\",className:\"text-white w-100 text-start p-0\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"d-flex justify-content-between align-items-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex align-items-center\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"mb-0\",children:\"Income\"}),/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-caret-\".concat(isIncomeOpen?'down':'right',\" ms-2 fa-lg\")})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"current-income-display mt-2\",children:[\"Total Monthly Income: $\",calculateTotals().income.toFixed(2)]})]})}),/*#__PURE__*/_jsx(Collapse,{in:isIncomeOpen,children:/*#__PURE__*/_jsx(\"div\",{id:\"incomeSection\",children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleIncomeSubmit,className:\"transaction-form mb-4\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:incomeDescription,onChange:e=>setIncomeDescription(e.target.value),placeholder:\"Income Source\",className:\"form-control\",required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:incomeAmount,onChange:e=>setIncomeAmount(e.target.value),placeholder:\"Amount\",step:\"0.01\",className:\"form-control\",required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-success\",children:\"Add Income\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"table-responsive\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"table table-hover\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Description\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Amount\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Paid\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:filterTransactions('income').map(transaction=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:editingId===transaction.id?/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:editingValues.description||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{description:e.target.value})),className:\"form-control form-control-sm\"}):transaction.description}),/*#__PURE__*/_jsx(\"td\",{children:editingId===transaction.id?/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingValues.amount||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{amount:parseFloat(e.target.value)})),className:\"form-control form-control-sm\",step:\"0.01\"}):/*#__PURE__*/_jsxs(\"span\",{className:\"text-success\",children:[\"$\",transaction.amount.toFixed(2)]})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"expense-checkbox\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:transaction.paid,onChange:()=>togglePaid(transaction.id),id:\"paid-income-\".concat(transaction.id)}),/*#__PURE__*/_jsx(\"label\",{className:\"checkmark\",htmlFor:\"paid-income-\".concat(transaction.id)})]})}),/*#__PURE__*/_jsx(\"td\",{children:editingId===transaction.id?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>saveEdit(transaction.id),className:\"btn-icon\",title:\"Save changes\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-save\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Save\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:cancelEdit,className:\"btn-icon delete\",title:\"Cancel editing\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-times\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Cancel\"})]})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"expense-actions\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>startEditing(transaction),className:\"btn-icon\",title:\"Edit this entry\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-edit\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Edit\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>deleteTransaction(transaction.id,currentMonth),className:\"btn-icon delete\",title:\"Delete this entry\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-trash\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Delete\"})]})]})})]},transaction.id))})]})})]})})})]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col-12\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"card-header bg-danger text-white\",children:/*#__PURE__*/_jsx(\"h3\",{className:\"mb-0\",children:\"Expenses List\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"card-body\",children:/*#__PURE__*/_jsx(\"div\",{className:\"table-responsive\",children:/*#__PURE__*/_jsx(\"div\",{className:\"expense-list\",children:filterTransactions('expense').map(transaction=>/*#__PURE__*/_jsx(\"div\",{className:\"expense-item \".concat(transaction.paid?'paid':''),children:/*#__PURE__*/_jsxs(\"div\",{className:\"expense-main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"expense-checkbox\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:transaction.paid,onChange:()=>togglePaid(transaction.id),id:\"paid-\".concat(transaction.id)}),/*#__PURE__*/_jsx(\"label\",{className:\"checkmark\",htmlFor:\"paid-\".concat(transaction.id)})]}),/*#__PURE__*/_jsx(\"div\",{className:\"expense-content\",children:editingId===transaction.id?/*#__PURE__*/// Edit mode\n_jsxs(\"div\",{className:\"expense-edit-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:editingValues.description||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{description:e.target.value})),className:\"form-control form-control-sm mb-2\",placeholder:\"Description\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingValues.amount||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{amount:parseFloat(e.target.value)})),className:\"form-control form-control-sm mb-2\",step:\"0.01\",placeholder:\"Amount\"}),/*#__PURE__*/_jsxs(\"select\",{value:editingValues.category||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{category:e.target.value})),className:\"form-select form-select-sm mb-2\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"Bills\",children:\"Bills\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Savings\",children:\"Savings\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Personal\",children:\"Personal\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Other\",children:\"Other\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:editingValues.dueDate||'',onChange:e=>setEditingValues(_objectSpread(_objectSpread({},editingValues),{},{dueDate:e.target.value})),className:\"form-control form-control-sm mb-2\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"edit-actions\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>saveEdit(transaction.id),className:\"btn btn-success btn-sm me-2\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-save\"}),\" Save\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:cancelEdit,className:\"btn btn-secondary btn-sm\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-times\"}),\" Cancel\"]})]})]}):/*#__PURE__*/// Display mode\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"expense-primary\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"expense-title\",children:transaction.description}),/*#__PURE__*/_jsxs(\"span\",{className:\"expense-amount\",children:[\"$\",transaction.amount.toFixed(2)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"expense-secondary\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"expense-tag\",children:transaction.category}),/*#__PURE__*/_jsx(\"span\",{className:\"expense-date\",children:getDayWithSuffix(transaction.dueDate)}),/*#__PURE__*/_jsx(\"span\",{className:\"expense-frequency\",children:transaction.frequency})]})]})}),!editingId&&/*#__PURE__*/_jsxs(\"div\",{className:\"expense-actions\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>startEditing(transaction),className:\"btn-icon\",title:\"Edit\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-edit\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Edit\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>deleteTransaction(transaction.id,currentMonth),className:\"btn-icon delete\",title:\"Delete\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-trash\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Delete\"})]})]})]})},transaction.id))})})})]})})}),/*#__PURE__*/_jsx(MonthPage,{month:currentMonth,year:currentYear,transactions:allMonthsTransactions[\"\".concat(currentYear,\"-\").concat(currentMonth)]||[],onUpdateTransaction:addTransaction,onDeleteTransaction:deleteTransaction})]}):/*#__PURE__*/_jsx(CreditCardTracker,{})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","Chart","ChartDataLabels","Collapse","Button","Card","Nav","Line","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","MonthPage","CreditCardTracker","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","register","ThemeContext","useTheme","App","transactions","setTransactions","incomeDescription","setIncomeDescription","incomeAmount","setIncomeAmount","expenseDescription","setExpenseDescription","expenseAmount","setExpenseAmount","category","setCategory","dueDate","setDueDate","Date","toISOString","split","frequency","setFrequency","currentMonth","setCurrentMonth","getMonth","chart","setChart","isIncomeOpen","setIsIncomeOpen","isIncomeListOpen","setIsIncomeListOpen","isExpenseOpen","setIsExpenseOpen","editingId","setEditingId","editingValues","setEditingValues","isDarkMode","setIsDarkMode","currentYear","setCurrentYear","getFullYear","allMonthsTransactions","setAllMonthsTransactions","activeTab","setActiveTab","months","savedTransactions","localStorage","getItem","JSON","parse","setItem","stringify","destroy","savedMonthsTransactions","ctx","document","getElementById","monthKey","concat","monthTransactions","allTransactions","filter","t","tDate","date","categoryTotals","reduce","acc","transaction","type","skipped","amount","Object","keys","length","newChart","data","labels","datasets","values","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","datalabels","formatter","value","toFixed","color","font","weight","size","legend","position","handleIncomeSubmit","e","preventDefault","alert","newIncome","id","now","description","parseFloat","addTransaction","handleExpenseSubmit","newExpense","paid","togglePaid","monthTransaction","find","prev","_objectSpread","map","toggleSkipped","deleteTransaction","transactionId","fromMonth","window","confirm","originalTransactionId","deleteAll","updatedMonthsTransactions","forEach","year","month","Number","filterTransactions","regularTransactions","transactionDate","recurringTransactions","combined","index","self","findIndex","calculateTotals","income","sum","expenses","saveEdit","_allMonthsTransaction","isMonthTransaction","some","editFuture","key","startEditing","toString","cancelEdit","getDayWithSuffix","day","getDate","getMonthlyTrends","last6Months","Array","from","_","i","d","setMonth","reverse","generateRecurringDates","startDate","endDate","dates","currentDate","end","setHours","console","log","push","originalDay","setDate","endOfYear","isRecurring","recurringDates","transactionsByMonth","recurringTransaction","Math","random","updated","entries","_ref","calculateSummary","paidIncome","balance","className","children","onClick","title","variant","Item","Link","active","onChange","target","Header","in","Body","onSubmit","placeholder","required","step","checked","htmlFor","onUpdateTransaction","onDeleteTransaction"],"sources":["/Users/machome/Documents/GitHub/Finance_Tracker-/src/App.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n// src/App.js\nimport React, { useState, useEffect, createContext, useContext } from 'react';\nimport './App.css';\nimport Chart from 'chart.js/auto';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { Collapse, Button, Card, Nav } from 'react-bootstrap';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n} from 'chart.js';\nimport MonthPage from './components/MonthPage';\nimport CreditCardTracker from './components/CreditCardTracker';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n);\n\n// Create theme context\nconst ThemeContext = createContext();\n\n// Add this before the App component\nexport const useTheme = () => useContext(ThemeContext);\n\nfunction App() {\n  const [transactions, setTransactions] = useState([]);\n  const [incomeDescription, setIncomeDescription] = useState('');\n  const [incomeAmount, setIncomeAmount] = useState('');\n  const [expenseDescription, setExpenseDescription] = useState('');\n  const [expenseAmount, setExpenseAmount] = useState('');\n  const [category, setCategory] = useState('Bills');\n  const [dueDate, setDueDate] = useState(new Date().toISOString().split('T')[0]);\n  const [frequency, setFrequency] = useState('Monthly');\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\n  const [chart, setChart] = useState(null);\n  const [isIncomeOpen, setIsIncomeOpen] = useState(false);\n  const [isIncomeListOpen, setIsIncomeListOpen] = useState(true);\n  const [isExpenseOpen, setIsExpenseOpen] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [editingValues, setEditingValues] = useState({});\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const [allMonthsTransactions, setAllMonthsTransactions] = useState({});\n  const [activeTab, setActiveTab] = useState('budget');\n\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n  // Load transactions from localStorage on component mount\n  useEffect(() => {\n    const savedTransactions = localStorage.getItem('transactions');\n    if (savedTransactions) {\n      setTransactions(JSON.parse(savedTransactions));\n    }\n  }, []);\n\n  // Save transactions to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('transactions', JSON.stringify(transactions));\n  }, [transactions]);\n\n  // Clean up chart on component unmount\n  useEffect(() => {\n    return () => {\n      if (chart) {\n        chart.destroy();\n      }\n    };\n  }, [chart]);\n\n  // Add this new useEffect to handle localStorage for allMonthsTransactions\n  useEffect(() => {\n    const savedMonthsTransactions = localStorage.getItem('allMonthsTransactions');\n    if (savedMonthsTransactions) {\n      setAllMonthsTransactions(JSON.parse(savedMonthsTransactions));\n    }\n  }, []);\n\n  // Add this useEffect to save allMonthsTransactions when it changes\n  useEffect(() => {\n    localStorage.setItem('allMonthsTransactions', JSON.stringify(allMonthsTransactions));\n  }, [allMonthsTransactions]);\n\n  // Update the chart update useEffect\n  useEffect(() => {\n    const ctx = document.getElementById('expenseChart');\n    if (!ctx) return;\n\n    // Destroy existing chart\n    if (chart) {\n      chart.destroy();\n    }\n\n    // Get all transactions for the current month\n    const monthKey = `${currentYear}-${currentMonth}`;\n    const monthTransactions = allMonthsTransactions[monthKey] || [];\n    \n    // Combine regular and monthly transactions\n    const allTransactions = [\n      ...transactions.filter(t => {\n        const tDate = new Date(t.date);\n        return tDate.getMonth() === currentMonth && \n               tDate.getFullYear() === currentYear;\n      }),\n      ...monthTransactions\n    ];\n\n    const categoryTotals = allTransactions.reduce((acc, transaction) => {\n      if (transaction.type === 'expense' && !transaction.skipped) {\n        acc[transaction.category] = (acc[transaction.category] || 0) + transaction.amount;\n      }\n      return acc;\n    }, {});\n\n    // Only create new chart if there's data to display\n    if (Object.keys(categoryTotals).length > 0) {\n      const newChart = new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: Object.keys(categoryTotals),\n          datasets: [{\n            data: Object.values(categoryTotals),\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.8)',\n              'rgba(54, 162, 235, 0.8)',\n              'rgba(255, 206, 86, 0.8)',\n              'rgba(75, 192, 192, 0.8)'\n            ],\n            borderColor: [\n              'rgba(255, 99, 132, 1)',\n              'rgba(54, 162, 235, 1)',\n              'rgba(255, 206, 86, 1)',\n              'rgba(75, 192, 192, 1)'\n            ],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            datalabels: {\n              formatter: (value) => `$${value.toFixed(2)}`,\n              color: 'white',\n              font: { \n                weight: 'bold',\n                size: 12\n              }\n            },\n            legend: {\n              position: 'right',\n              labels: {\n                color: isDarkMode ? '#ffffff' : '#666666',\n                font: {\n                  size: 12\n                }\n              }\n            }\n          }\n        },\n        plugins: [ChartDataLabels]\n      });\n\n      setChart(newChart);\n    }\n  }, [currentMonth, currentYear, transactions, allMonthsTransactions, isDarkMode, chart]);\n\n  // Separate submit handlers for income and expenses\n  const handleIncomeSubmit = (e) => {\n    e.preventDefault();\n    if (!incomeDescription || !incomeAmount) {\n      alert(\"Please fill in all required fields.\");\n      return;\n    }\n\n    const newIncome = {\n      id: Date.now(),\n      description: incomeDescription,\n      amount: parseFloat(incomeAmount),\n      type: 'income',\n      date: new Date().toISOString(),\n      frequency: 'Monthly', // Add default frequency for income\n      dueDate: new Date().toISOString().split('T')[0] // Add current date as due date\n    };\n\n    // Use addTransaction instead of directly updating transactions\n    addTransaction(newIncome, 'income');\n    \n    // Clear form\n    setIncomeDescription('');\n    setIncomeAmount('');\n    alert('Income added successfully!');\n  };\n\n  const handleExpenseSubmit = (e) => {\n    e.preventDefault();\n    if (!expenseDescription || !expenseAmount || !dueDate || !category) {\n      alert(\"Please fill in all required fields.\");\n      return;\n    }\n\n    const newExpense = {\n      id: Date.now(),\n      description: expenseDescription,\n      amount: parseFloat(expenseAmount),\n      type: 'expense',\n      category,\n      dueDate,\n      frequency,\n      paid: false,\n      skipped: false,\n      date: new Date().toISOString()\n    };\n\n    // Use addTransaction instead of directly updating transactions\n    addTransaction(newExpense, 'expense');\n    \n    // Clear form\n    setExpenseDescription('');\n    setExpenseAmount('');\n    alert('Expense added successfully!');\n  };\n\n  const togglePaid = (id) => {\n    // Check if the transaction is in allMonthsTransactions\n    const monthKey = `${currentYear}-${currentMonth}`;\n    const monthTransactions = allMonthsTransactions[monthKey] || [];\n    const monthTransaction = monthTransactions.find(t => t.id === id);\n\n    if (monthTransaction) {\n      // Update in allMonthsTransactions\n      setAllMonthsTransactions(prev => ({\n        ...prev,\n        [monthKey]: prev[monthKey].map(t =>\n          t.id === id ? { ...t, paid: !t.paid, skipped: false } : t\n        )\n      }));\n    } else {\n      // Update in regular transactions\n      setTransactions(transactions.map(t =>\n        t.id === id ? { ...t, paid: !t.paid, skipped: false } : t\n      ));\n    }\n  };\n\n  const toggleSkipped = (id) => {\n    setTransactions(transactions.map(t => \n      t.id === id ? { ...t, skipped: !t.skipped, paid: false } : t\n    ));\n  };\n\n  const deleteTransaction = (transactionId, fromMonth) => {\n    if (window.confirm('Delete this transaction?')) {\n      const transaction = transactions.find(t => t.id === transactionId);\n      \n      if (!transaction) {\n        // Check in allMonthsTransactions if not found in transactions\n        const monthKey = `${currentYear}-${fromMonth}`;\n        const monthTransactions = allMonthsTransactions[monthKey] || [];\n        const monthTransaction = monthTransactions.find(t => t.id === transactionId);\n        \n        if (monthTransaction?.originalTransactionId) {\n          // If it's a recurring transaction, ask if they want to delete all future occurrences\n          const deleteAll = window.confirm(\n            'Delete all future occurrences of this recurring transaction?'\n          );\n          \n          if (deleteAll) {\n            // Delete from current month forward\n            const updatedMonthsTransactions = { ...allMonthsTransactions };\n            Object.keys(updatedMonthsTransactions).forEach(monthKey => {\n              const [year, month] = monthKey.split('-').map(Number);\n              if (year > currentYear || (year === currentYear && month >= fromMonth)) {\n                updatedMonthsTransactions[monthKey] = updatedMonthsTransactions[monthKey]\n                  .filter(t => t.originalTransactionId !== monthTransaction.originalTransactionId);\n              }\n            });\n            setAllMonthsTransactions(updatedMonthsTransactions);\n          } else {\n            // Delete only this occurrence\n            setAllMonthsTransactions(prev => ({\n              ...prev,\n              [monthKey]: prev[monthKey].filter(t => t.id !== transactionId)\n            }));\n          }\n        } else {\n          // Handle one-time transaction deletion\n          setAllMonthsTransactions(prev => ({\n            ...prev,\n            [monthKey]: prev[monthKey].filter(t => t.id !== transactionId)\n          }));\n        }\n      } else {\n        // Handle deletion from regular transactions array\n        setTransactions(transactions.filter(t => t.id !== transactionId));\n      }\n    }\n  };\n\n  // Update the filterTransactions function to properly combine both sources\n  const filterTransactions = (type) => {\n    const monthKey = `${currentYear}-${currentMonth}`;\n    const monthTransactions = allMonthsTransactions[monthKey] || [];\n    \n    // Get transactions from both sources\n    const regularTransactions = transactions.filter(t => {\n      const transactionDate = new Date(t.date);\n      return t.type === type && \n             transactionDate.getMonth() === currentMonth &&\n             transactionDate.getFullYear() === currentYear;\n    });\n\n    const recurringTransactions = monthTransactions.filter(t => t.type === type);\n    \n    // Combine and remove duplicates\n    const combined = [...regularTransactions, ...recurringTransactions];\n    return combined.filter((transaction, index, self) =>\n      index === self.findIndex(t => t.id === transaction.id)\n    );\n  };\n\n  // Update calculateTotals to include both regular and recurring transactions\n  const calculateTotals = () => {\n    const monthKey = `${currentYear}-${currentMonth}`;\n    const monthTransactions = allMonthsTransactions[monthKey] || [];\n    \n    const regularTransactions = transactions.filter(t => {\n      const transactionDate = new Date(t.date);\n      return transactionDate.getMonth() === currentMonth &&\n             transactionDate.getFullYear() === currentYear;\n    });\n\n    const allTransactions = [...regularTransactions, ...monthTransactions];\n\n    return {\n      income: allTransactions\n        .filter(t => t.type === 'income')\n        .reduce((sum, t) => sum + t.amount, 0),\n      expenses: allTransactions\n        .filter(t => t.type === 'expense' && !t.skipped)\n        .reduce((sum, t) => sum + t.amount, 0),\n      paid: allTransactions\n        .filter(t => t.paid)\n        .reduce((sum, t) => sum + t.amount, 0)\n    };\n  };\n\n  // Update the saveEdit function\n  const saveEdit = (id) => {\n    const monthKey = `${currentYear}-${currentMonth}`;\n    const isMonthTransaction = allMonthsTransactions[monthKey]?.some(t => t.id === id);\n    \n    if (isMonthTransaction) {\n      // Handle editing recurring transactions\n      if (editingValues.originalTransactionId) {\n        const editFuture = window.confirm(\n          'Do you want to apply these changes to all future occurrences?'\n        );\n        \n        if (editFuture) {\n          // Update all future occurrences\n          const updatedMonthsTransactions = { ...allMonthsTransactions };\n          Object.keys(updatedMonthsTransactions).forEach(key => {\n            const [year, month] = key.split('-').map(Number);\n            if (year > currentYear || (year === currentYear && month >= currentMonth)) {\n              updatedMonthsTransactions[key] = updatedMonthsTransactions[key].map(t =>\n                t.originalTransactionId === editingValues.originalTransactionId\n                  ? { ...t, ...editingValues }\n                  : t\n              );\n            }\n          });\n          setAllMonthsTransactions(updatedMonthsTransactions);\n        } else {\n          // Update only this occurrence\n          setAllMonthsTransactions(prev => ({\n            ...prev,\n            [monthKey]: prev[monthKey].map(t =>\n              t.id === id ? { ...t, ...editingValues } : t\n            )\n          }));\n        }\n      } else {\n        // Update one-time transaction\n        setAllMonthsTransactions(prev => ({\n          ...prev,\n          [monthKey]: prev[monthKey].map(t =>\n            t.id === id ? { ...t, ...editingValues } : t\n          )\n        }));\n      }\n    } else {\n      // Handle regular transactions\n      setTransactions(transactions.map(t => \n        t.id === id ? { ...t, ...editingValues } : t\n      ));\n    }\n    \n    setEditingId(null);\n    setEditingValues({});\n  };\n\n  // Update the startEditing function\n  const startEditing = (transaction) => {\n    setEditingId(transaction.id);\n    setEditingValues({\n      ...transaction,\n      amount: transaction.amount.toString()\n    });\n  };\n\n  // Add this function to cancel editing\n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditingValues({});\n  };\n\n  // Add this helper function at the top of your App component\n  const getDayWithSuffix = (date) => {\n    const day = new Date(date).getDate();\n    if (day > 3 && day < 21) return day + 'th';\n    switch (day % 10) {\n      case 1: return day + \"st\";\n      case 2: return day + \"nd\";\n      case 3: return day + \"rd\";\n      default: return day + \"th\";\n    }\n  };\n\n  // Add this function in your App component\n  const getMonthlyTrends = () => {\n    const last6Months = Array.from({ length: 6 }, (_, i) => {\n      const d = new Date();\n      d.setMonth(d.getMonth() - i);\n      return d;\n    }).reverse();\n\n    return {\n      labels: last6Months.map(date => months[date.getMonth()]),\n      expenses: last6Months.map(date => {\n        return transactions\n          .filter(t => {\n            const tDate = new Date(t.date);\n            return t.type === 'expense' && \n                   tDate.getMonth() === date.getMonth() &&\n                   !t.skipped;\n          })\n          .reduce((sum, t) => sum + t.amount, 0);\n      }),\n      income: last6Months.map(date => {\n        return transactions\n          .filter(t => {\n            const tDate = new Date(t.date);\n            return t.type === 'income' && \n                   tDate.getMonth() === date.getMonth();\n          })\n          .reduce((sum, t) => sum + t.amount, 0);\n      })\n    };\n  };\n\n  // Update the generateRecurringDates function\n  const generateRecurringDates = (startDate, frequency, endDate) => {\n    const dates = [];\n    let currentDate = new Date(startDate);\n    const end = new Date(endDate);\n    \n    // Set both dates to start of day for accurate comparison\n    currentDate.setHours(0, 0, 0, 0);\n    end.setHours(0, 0, 0, 0);\n\n    console.log('Generating recurring dates:', {\n      startDate: currentDate,\n      endDate: end,\n      frequency\n    });\n\n    while (currentDate <= end) {\n      dates.push(new Date(currentDate));\n      \n      // Store the original day of month\n      const originalDay = currentDate.getDate();\n      \n      // Calculate next date based on frequency\n      switch (frequency) {\n        case 'Weekly':\n          currentDate.setDate(currentDate.getDate() + 7);\n          break;\n        case 'Bi-Weekly':\n          currentDate.setDate(currentDate.getDate() + 14);\n          break;\n        case 'Monthly':\n          currentDate.setMonth(currentDate.getMonth() + 1);\n          // Check if we've rolled over to the next month\n          if (currentDate.getDate() !== originalDay) {\n            // We've hit the end of the month, go back to last day of previous month\n            currentDate.setDate(0);\n          }\n          break;\n        default:\n          return dates;\n      }\n\n      console.log(`Added ${frequency} date:`, new Date(currentDate));\n    }\n\n    console.log('Generated dates:', dates);\n    return dates;\n  };\n\n  // Update the addTransaction function\n  const addTransaction = (transaction, type) => {\n    const endOfYear = new Date(currentYear, 11, 31);\n    const isRecurring = transaction.frequency !== 'One-time';\n    const startDate = new Date(transaction.dueDate);\n    \n    console.log('Adding transaction:', {\n      transaction,\n      type,\n      isRecurring,\n      startDate,\n      endOfYear\n    });\n\n    if (isRecurring) {\n      const recurringDates = generateRecurringDates(\n        startDate,\n        transaction.frequency,\n        endOfYear\n      );\n\n      console.log('Generated recurring dates:', recurringDates.length);\n\n      // Group transactions by month\n      const transactionsByMonth = {};\n      recurringDates.forEach(date => {\n        const monthKey = `${date.getFullYear()}-${date.getMonth()}`;\n        if (!transactionsByMonth[monthKey]) {\n          transactionsByMonth[monthKey] = [];\n        }\n\n        const recurringTransaction = {\n          ...transaction,\n          id: Date.now() + Math.random(), // Ensure unique IDs\n          dueDate: date.toISOString().split('T')[0],\n          originalTransactionId: transaction.id,\n          paid: false // Reset paid status for each occurrence\n        };\n\n        transactionsByMonth[monthKey].push(recurringTransaction);\n      });\n\n      console.log('Transactions grouped by month:', transactionsByMonth);\n\n      // Update allMonthsTransactions\n      setAllMonthsTransactions(prev => {\n        const updated = { ...prev };\n        Object.entries(transactionsByMonth).forEach(([monthKey, transactions]) => {\n          if (!updated[monthKey]) {\n            updated[monthKey] = [];\n          }\n          updated[monthKey] = [...updated[monthKey], ...transactions];\n        });\n        return updated;\n      });\n\n    } else {\n      // Handle one-time transactions\n      const transactionDate = new Date(transaction.dueDate);\n      const monthKey = `${transactionDate.getFullYear()}-${transactionDate.getMonth()}`;\n      \n      setAllMonthsTransactions(prev => ({\n        ...prev,\n        [monthKey]: [...(prev[monthKey] || []), { ...transaction, paid: false }]\n      }));\n    }\n  };\n\n  // In App.js, update the summary calculation\n  const calculateSummary = (transactions) => {\n    const income = transactions\n      .filter(t => t.type === 'income')\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n    const paidIncome = transactions\n      .filter(t => t.type === 'income' && t.paid)\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n    const expenses = transactions\n      .filter(t => t.type === 'expense')\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n    const balance = paidIncome - expenses;\n\n    return { income, paidIncome, expenses, balance };\n  };\n\n  return (\n    <div className={`App ${isDarkMode ? 'dark-mode' : ''}`}>\n      <header className=\"finance-header\">\n        <div className=\"theme-toggle\">\n          <button \n            onClick={() => setIsDarkMode(!isDarkMode)}\n            className=\"theme-toggle-btn\"\n            title={isDarkMode ? \"Switch to Light Mode\" : \"Switch to Dark Mode\"}\n          >\n            <i className={`fas fa-${isDarkMode ? 'sun' : 'moon'}`}></i>\n          </button>\n        </div>\n        <h1 className=\"gradient-text\">Finance Tracker</h1>\n        \n        {/* Update the navigation section */}\n        <div className=\"app-navigation\">\n          {/* Main Tabs */}\n          <Nav variant=\"tabs\" className=\"main-nav\">\n            <Nav.Item>\n              <Nav.Link \n                active={activeTab === 'budget'}\n                onClick={() => setActiveTab('budget')}\n              >\n                <i className=\"fas fa-wallet me-2\"></i>\n                Budget Tracker\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link \n                active={activeTab === 'credit'}\n                onClick={() => setActiveTab('credit')}\n              >\n                <i className=\"fas fa-credit-card me-2\"></i>\n                Credit Cards\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n\n          {/* Month Navigation - Only show for budget tab */}\n          {activeTab === 'budget' && (\n            <div className=\"month-navigation\">\n              <button \n                className=\"nav-btn prev\"\n                onClick={() => {\n                  if (currentMonth === 0) {\n                    setCurrentYear(prev => prev - 1);\n                    setCurrentMonth(11);\n                  } else {\n                    setCurrentMonth(prev => prev - 1);\n                  }\n                }}\n                aria-label=\"Previous month\"\n              >\n                <i className=\"fas fa-arrow-left\"></i>\n              </button>\n              \n              <div className=\"month-select\">\n                <select \n                  value={currentMonth}\n                  onChange={(e) => setCurrentMonth(Number(e.target.value))}\n                  className=\"month-dropdown\"\n                  aria-label=\"Select month\"\n                >\n                  {months.map((month, index) => (\n                    <option key={index} value={index}>{month}</option>\n                  ))}\n                </select>\n                <select \n                  value={currentYear}\n                  onChange={(e) => setCurrentYear(Number(e.target.value))}\n                  className=\"year-dropdown\"\n                  aria-label=\"Select year\"\n                >\n                  {Array.from({ length: 5 }, (_, i) => (\n                    <option key={i} value={currentYear - 2 + i}>\n                      {currentYear - 2 + i}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <button \n                className=\"nav-btn next\"\n                onClick={() => {\n                  if (currentMonth === 11) {\n                    setCurrentYear(prev => prev + 1);\n                    setCurrentMonth(0);\n                  } else {\n                    setCurrentMonth(prev => prev + 1);\n                  }\n                }}\n                aria-label=\"Next month\"\n              >\n                <i className=\"fas fa-arrow-right\"></i>\n              </button>\n            </div>\n          )}\n        </div>\n      </header>\n\n      {/* Conditional Rendering based on active tab */}\n      {activeTab === 'budget' ? (\n        <>\n          {/* Updated Summary Card */}\n          <div className=\"row mb-4\">\n            {/* Summary Stats - Simplified */}\n            <div className=\"mobile-summary\">\n              <div className=\"stat-card\">\n                <div className=\"stat-row income\">\n                  <div className=\"stat-label\">Income</div>\n                  <div className=\"stat-value\">${calculateTotals().income.toFixed(2)}</div>\n                </div>\n                <div className=\"stat-row expenses\">\n                  <div className=\"stat-label\">Expenses</div>\n                  <div className=\"stat-value\">${calculateTotals().expenses.toFixed(2)}</div>\n                </div>\n                <div className=\"stat-row balance\">\n                  <div className=\"stat-label\">Balance</div>\n                  <div className=\"stat-value\">${(calculateTotals().income - calculateTotals().expenses).toFixed(2)}</div>\n                </div>\n              </div>\n              \n              {/* Single Chart - Most Important View */}\n              <div className=\"chart-section\">\n                <h3>Expense Breakdown</h3>\n                <div className=\"chart-container\">\n                  <canvas id=\"expenseChart\"></canvas>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Forms Section - Side by Side */}\n          <div className=\"row\">\n            {/* Expense Form */}\n            <div className=\"col-md-8 mb-4\">\n              <Card>\n                <Card.Header className=\"bg-danger text-white\">\n                  <Button\n                    onClick={() => setIsExpenseOpen(!isExpenseOpen)}\n                    aria-controls=\"expenseForm\"\n                    aria-expanded={isExpenseOpen}\n                    variant=\"link\"\n                    className=\"text-white w-100 text-start p-0\"\n                  >\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <div className=\"d-flex align-items-center\">\n                        <h3 className=\"mb-0\">Expenses</h3>\n                        <i className={`fas fa-caret-${isExpenseOpen ? 'down' : 'right'} ms-2 fa-lg`}></i>\n                      </div>\n                    </div>\n                  </Button>\n                </Card.Header>\n                <Collapse in={isExpenseOpen}>\n                  <div id=\"expenseForm\">\n                    <Card.Body>\n                      <form onSubmit={handleExpenseSubmit} className=\"transaction-form\">\n                        <input\n                          type=\"text\"\n                          value={expenseDescription}\n                          onChange={(e) => setExpenseDescription(e.target.value)}\n                          placeholder=\"Expense Item\"\n                          className=\"form-control\"\n                          required\n                        />\n                        <input\n                          type=\"number\"\n                          value={expenseAmount}\n                          onChange={(e) => setExpenseAmount(e.target.value)}\n                          placeholder=\"Amount\"\n                          step=\"0.01\"\n                          className=\"form-control\"\n                          required\n                        />\n                        <select \n                          value={category} \n                          onChange={(e) => setCategory(e.target.value)}\n                          className=\"form-select\"\n                          required\n                        >\n                          <option value=\"\">Select Category</option>\n                          <option value=\"Bills\">Bills</option>\n                          <option value=\"Savings\">Savings</option>\n                          <option value=\"Personal\">Personal</option>\n                          <option value=\"Other\">Other</option>\n                        </select>\n                        <input\n                          type=\"date\"\n                          value={dueDate}\n                          onChange={(e) => setDueDate(e.target.value)}\n                          className=\"form-control\"\n                          required\n                        />\n                        <select \n                          value={frequency} \n                          onChange={(e) => setFrequency(e.target.value)}\n                          className=\"form-select\"\n                          required\n                        >\n                          <option value=\"\">Select Frequency</option>\n                          <option value=\"Monthly\">Monthly</option>\n                          <option value=\"Bi-Weekly\">Bi-Weekly</option>\n                          <option value=\"Weekly\">Weekly</option>\n                        </select>\n                        <button type=\"submit\" className=\"btn btn-danger\">\n                          Add Expense\n                        </button>\n                      </form>\n                    </Card.Body>\n                  </div>\n                </Collapse>\n              </Card>\n            </div>\n\n            {/* Income Form */}\n            <div className=\"col-md-4 mb-4\">\n              <Card>\n                <Card.Header className=\"bg-success text-white\">\n                  <Button\n                    onClick={() => setIsIncomeOpen(!isIncomeOpen)}\n                    aria-controls=\"incomeSection\"\n                    aria-expanded={isIncomeOpen}\n                    variant=\"link\"\n                    className=\"text-white w-100 text-start p-0\"\n                  >\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <div className=\"d-flex align-items-center\">\n                        <h3 className=\"mb-0\">Income</h3>\n                        <i className={`fas fa-caret-${isIncomeOpen ? 'down' : 'right'} ms-2 fa-lg`}></i>\n                      </div>\n                    </div>\n                    <div className=\"current-income-display mt-2\">\n                      Total Monthly Income: ${calculateTotals().income.toFixed(2)}\n                    </div>\n                  </Button>\n                </Card.Header>\n                <Collapse in={isIncomeOpen}>\n                  <div id=\"incomeSection\">\n                    <Card.Body>\n                      <form onSubmit={handleIncomeSubmit} className=\"transaction-form mb-4\">\n                        <input\n                          type=\"text\"\n                          value={incomeDescription}\n                          onChange={(e) => setIncomeDescription(e.target.value)}\n                          placeholder=\"Income Source\"\n                          className=\"form-control\"\n                          required\n                        />\n                        <input\n                          type=\"number\"\n                          value={incomeAmount}\n                          onChange={(e) => setIncomeAmount(e.target.value)}\n                          placeholder=\"Amount\"\n                          step=\"0.01\"\n                          className=\"form-control\"\n                          required\n                        />\n                        <button type=\"submit\" className=\"btn btn-success\">\n                          Add Income\n                        </button>\n                      </form>\n                      <div className=\"table-responsive\">\n                        <table className=\"table table-hover\">\n                          <thead>\n                            <tr>\n                              <th>Description</th>\n                              <th>Amount</th>\n                              <th>Paid</th>\n                              <th>Actions</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {filterTransactions('income').map(transaction => (\n                              <tr key={transaction.id}>\n                                <td>\n                                  {editingId === transaction.id ? (\n                                    <input\n                                      type=\"text\"\n                                      value={editingValues.description || ''}\n                                      onChange={(e) => setEditingValues({\n                                        ...editingValues,\n                                        description: e.target.value\n                                      })}\n                                      className=\"form-control form-control-sm\"\n                                    />\n                                  ) : (\n                                    transaction.description\n                                  )}\n                                </td>\n                                <td>\n                                  {editingId === transaction.id ? (\n                                    <input\n                                      type=\"number\"\n                                      value={editingValues.amount || ''}\n                                      onChange={(e) => setEditingValues({\n                                        ...editingValues,\n                                        amount: parseFloat(e.target.value)\n                                      })}\n                                      className=\"form-control form-control-sm\"\n                                      step=\"0.01\"\n                                    />\n                                  ) : (\n                                    <span className=\"text-success\">${transaction.amount.toFixed(2)}</span>\n                                  )}\n                                </td>\n                                <td>\n                                  <div className=\"expense-checkbox\">\n                                    <input\n                                      type=\"checkbox\"\n                                      checked={transaction.paid}\n                                      onChange={() => togglePaid(transaction.id)}\n                                      id={`paid-income-${transaction.id}`}\n                                    />\n                                    <label className=\"checkmark\" htmlFor={`paid-income-${transaction.id}`}></label>\n                                  </div>\n                                </td>\n                                <td>\n                                  {editingId === transaction.id ? (\n                                    <>\n                                      <button\n                                        onClick={() => saveEdit(transaction.id)}\n                                        className=\"btn-icon\"\n                                        title=\"Save changes\"\n                                      >\n                                        <i className=\"fas fa-save\"></i>\n                                        <span>Save</span>\n                                      </button>\n                                      <button\n                                        onClick={cancelEdit}\n                                        className=\"btn-icon delete\"\n                                        title=\"Cancel editing\"\n                                      >\n                                        <i className=\"fas fa-times\"></i>\n                                        <span>Cancel</span>\n                                      </button>\n                                    </>\n                                  ) : (\n                                    <div className=\"expense-actions\">\n                                      <button\n                                        onClick={() => startEditing(transaction)}\n                                        className=\"btn-icon\"\n                                        title=\"Edit this entry\"\n                                      >\n                                        <i className=\"fas fa-edit\"></i>\n                                        <span>Edit</span>\n                                      </button>\n                                      <button\n                                        onClick={() => deleteTransaction(transaction.id, currentMonth)}\n                                        className=\"btn-icon delete\"\n                                        title=\"Delete this entry\"\n                                      >\n                                        <i className=\"fas fa-trash\"></i>\n                                        <span>Delete</span>\n                                      </button>\n                                    </div>\n                                  )}\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    </Card.Body>\n                  </div>\n                </Collapse>\n              </Card>\n            </div>\n          </div>\n\n          {/* Full Width Expenses List */}\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"card\">\n                <div className=\"card-header bg-danger text-white\">\n                  <h3 className=\"mb-0\">Expenses List</h3>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"table-responsive\">\n                    {/* Mobile-Friendly Expense List */}\n                    <div className=\"expense-list\">\n                      {filterTransactions('expense').map(transaction => (\n                        <div key={transaction.id} className={`expense-item ${transaction.paid ? 'paid' : ''}`}>\n                          <div className=\"expense-main\">\n                            <div className=\"expense-checkbox\">\n                              <input\n                                type=\"checkbox\"\n                                checked={transaction.paid}\n                                onChange={() => togglePaid(transaction.id)}\n                                id={`paid-${transaction.id}`}\n                              />\n                              <label className=\"checkmark\" htmlFor={`paid-${transaction.id}`}></label>\n                            </div>\n                            <div className=\"expense-content\">\n                              {editingId === transaction.id ? (\n                                // Edit mode\n                                <div className=\"expense-edit-form\">\n                                  <input\n                                    type=\"text\"\n                                    value={editingValues.description || ''}\n                                    onChange={(e) => setEditingValues({\n                                      ...editingValues,\n                                      description: e.target.value\n                                    })}\n                                    className=\"form-control form-control-sm mb-2\"\n                                    placeholder=\"Description\"\n                                  />\n                                  <input\n                                    type=\"number\"\n                                    value={editingValues.amount || ''}\n                                    onChange={(e) => setEditingValues({\n                                      ...editingValues,\n                                      amount: parseFloat(e.target.value)\n                                    })}\n                                    className=\"form-control form-control-sm mb-2\"\n                                    step=\"0.01\"\n                                    placeholder=\"Amount\"\n                                  />\n                                  <select\n                                    value={editingValues.category || ''}\n                                    onChange={(e) => setEditingValues({\n                                      ...editingValues,\n                                      category: e.target.value\n                                    })}\n                                    className=\"form-select form-select-sm mb-2\"\n                                  >\n                                    <option value=\"Bills\">Bills</option>\n                                    <option value=\"Savings\">Savings</option>\n                                    <option value=\"Personal\">Personal</option>\n                                    <option value=\"Other\">Other</option>\n                                  </select>\n                                  <input\n                                    type=\"date\"\n                                    value={editingValues.dueDate || ''}\n                                    onChange={(e) => setEditingValues({\n                                      ...editingValues,\n                                      dueDate: e.target.value\n                                    })}\n                                    className=\"form-control form-control-sm mb-2\"\n                                  />\n                                  <div className=\"edit-actions\">\n                                    <button\n                                      onClick={() => saveEdit(transaction.id)}\n                                      className=\"btn btn-success btn-sm me-2\"\n                                    >\n                                      <i className=\"fas fa-save\"></i> Save\n                                    </button>\n                                    <button\n                                      onClick={cancelEdit}\n                                      className=\"btn btn-secondary btn-sm\"\n                                    >\n                                      <i className=\"fas fa-times\"></i> Cancel\n                                    </button>\n                                  </div>\n                                </div>\n                              ) : (\n                                // Display mode\n                                <>\n                                  <div className=\"expense-primary\">\n                                    <span className=\"expense-title\">{transaction.description}</span>\n                                    <span className=\"expense-amount\">${transaction.amount.toFixed(2)}</span>\n                                  </div>\n                                  <div className=\"expense-secondary\">\n                                    <span className=\"expense-tag\">{transaction.category}</span>\n                                    <span className=\"expense-date\">{getDayWithSuffix(transaction.dueDate)}</span>\n                                    <span className=\"expense-frequency\">{transaction.frequency}</span>\n                                  </div>\n                                </>\n                              )}\n                            </div>\n                            {!editingId && (\n                              <div className=\"expense-actions\">\n                                <button\n                                  onClick={() => startEditing(transaction)}\n                                  className=\"btn-icon\"\n                                  title=\"Edit\"\n                                >\n                                  <i className=\"fas fa-edit\"></i>\n                                  <span>Edit</span>\n                                </button>\n                                <button\n                                  onClick={() => deleteTransaction(transaction.id, currentMonth)}\n                                  className=\"btn-icon delete\"\n                                  title=\"Delete\"\n                                >\n                                  <i className=\"fas fa-trash\"></i>\n                                  <span>Delete</span>\n                                </button>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Render current month's page */}\n          <MonthPage\n            month={currentMonth}\n            year={currentYear}\n            transactions={allMonthsTransactions[`${currentYear}-${currentMonth}`] || []}\n            onUpdateTransaction={addTransaction}\n            onDeleteTransaction={deleteTransaction}\n          />\n        </>\n      ) : (\n        <CreditCardTracker />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}